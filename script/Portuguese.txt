=== components/Output 1 ===

$59663530139004* Saída de 1 Bit


=== trans/panel_program_1_output ===

$31398283096964* Saída


=== rpg/maps/overworld/kligara ===

$78685013556649*
Meu trabalho é ficar olhando
para essas coisas de combustível
do reator


=== rpg/maps/overworld/control_panel ===

$94056033073339*
O capitão vai me jogar 
para fora da nave se eu tocar nisso
$20128423531070* Painel de controle


=== trans/level_registers_description ===

$73800316874022* [center]Crie o esquemático que corresponda às especificações do código[/center]


=== rpg/maps/overworld/water ===

$82402577990931* Água


=== components/Output1Car ===

$12896765714603* Transporte


=== components/FullAdder ===

$57559382166174* Soma 3 bits e fornece como saída a soma e o transporte
$77669928463861* Somador Completo


=== trans/panel_car_output_0 ===

$21449898267446* Transporte


=== misc/options ===

$49251062339706* opções


=== misc/ide_delete_program ===

$30480928296639* Tem certeza de que deseja excluir o programa: {program}
$87279416580516* Sim


=== misc/io_label_change ===

$50497979766012* Texto do rótulo


=== levels/turing_complete ===

$15326252036920* Antes, apenas o código podia influenciar a memória, agora a memória deve influenciar o código. Com a adição da lógica condicional, nosso computador pode executar qualquer algoritmo e calcular qualquer coisa calculável.
$16583885726240* Sim, você conseguiu! Eu pensei que você era apenas essa criatura primata estranha e sem pelos, mas você realmente construiu um computador de verdade! Incrível.
$10510746154639* No tick 1 o programa deve carregar o endereço 1.
$10317244906317* Nenhum programa encontrado
$14587485007736* Até este ponto todos os programas possíveis estavam confinados a executar em ordem byte por byte.
$19649119273248*
A última coisa que precisamos adicionar é um mecanismo para alterar o contador de programa através de [INSTRUCTIONS] quando certas condições forem atendidas.

Quando os dois bits mais significativos estão [ON][ON], entramos no modo condicional. No modo condicional, o valor em REG 3 é comparado com as condições definidas pelos 3 bits menos significativos na instrução. Se a condição for verdadeira, sobrescrevemos o contador com o valor em REG 0.
Alterar o contador condicionalmente significa que podemos pular [INSTRUCTIONS] baseado em condições ou fazer [INSTRUCTIONS] executar em laço.

Condições:
[OFF] [OFF] [OFF] Nunca
[OFF] [OFF] [ON] Se [color=#e49f44]REG 3[/color] = 0
[OFF] [ON] [OFF] Se [color=#e49f44]REG 3[/color] < 0
[OFF] [ON] [ON] Se [color=#e49f44]REG 3[/color] ≤ 0 
[ON] [OFF] [OFF] Sempre
[ON] [OFF] [ON] Se [color=#e49f44]REG 3[/color] ≠ 0 
[ON] [ON] [OFF] Se [color=#e49f44]REG 3[/color] ≥ 0
[ON] [ON] [ON] Se [color=#e49f44]REG 3[/color] > 0

Essas condições correspondem ao componente condicional que foi salvo na fábrica de componentes.


=== rpg/maps/prison/snuffles ===

$38415939620256* Au au
$58496270566737* Snuffles
$97846640630713* Sangue
$18282167453919* Pobre e velho Snuffles


=== rpg/maps/unseen_fruit/wall_broke ===

$82933036983558* Parede danificada


=== levels/Second Tick ===

$14355963067874* Saída [ON] apenas no segundo tick.
$17526582195506* Como você sabe, esses testes culminam na construção de um computador funcional.
$15726318553190* Essa é a principal razão pela qual não comemos você depois.
$19277843280528*
 [color=#b72d41][b]DICA:[/b][/color] 
Você pode selecionar um componente com seus pinos clicando duas vezes nele
$15296208528991* Espécies capazes de terminar são consideradas sencientes por lei.


=== trans/manual_text_console ===

$39093856809104*
O componente de console é um display [color=#dd6576][url=ASCII encoding]ASCII[/url][/color] de 80x24. Ele deve ser vinculado a uma fonte de memória através do botão de vincular componente:
 [img=200]dialogue/manual/Console/link_state.png[/img]

Atualizar a memória vinculada então atualizará os visuais no console. No modo padrão sem cor, cada byte no componente de memória determina qual será o caractere correspondente na tela. No entanto, a primeira posição de caractere pode ser deslocada usando o pino de entrada no console. Isso é útil, por exemplo, ao implementar rolagem.

O console também possui um modo colorido que pode ser ativado no painel:
[img=125]dialogue/manual/Console/color_mode.png[/img]

Neste modo, cada caractere tem adicional de 3 bytes de fundo e 3 bytes de primeiro plano [color=#dd6576][url=RGB color]cor RGB[/url][/color] para um total de 7 bytes de dados por caractere. No entanto, cada caractere é alinhado em 8 bytes, o que é mais conveniente quando você define sua RAM ou ROM para endereçamento de largura de 64 bits. Além disso, você pode manter os índices de caracteres iguais ao mudar seu esquema de modo sem cor para modo colorido, alterando a largura de bits da RAM ou ROM de 8 para 64 ao mesmo tempo.

No modo colorido, o byte mais baixo é o caractere, os próximos 3 bytes são a cor da fonte e os 3 bytes seguintes são a cor de fundo.


=== trans/level_tower_description ===

$19095794285423* Reempilhe os discos radioativos


=== trans/panel_lessu_description ===

$10492822526537* [center]Verifica se Entrada 1 < Entrada 2[/center]


=== levels/component_factory ===

$14665712485657* Este componente personalizado não pode ser usado pois não tem área.
$17077079648771* Componentes podem ser adicionados, renomeados ou excluídos usando o menu de esquemas.
$19551383617326*
Bem-vindo à fábrica de componentes, os circuitos que você criar aqui poderão ser usados como componentes em arquiteturas.
O circuito que você criar define o comportamento do componente e o layout define sua forma.
$12516102012088* Este componente não tem área e não poderá ser usado em níveis. Coloque componentes no mapa para dar-lhe área.
$14712417427860* Como este nível é uma ferramenta e não um desafio, você pode ir ao mapa de níveis e continuar quando quiser.
$15549447390000* 2 componentes de entrada/saída estão no mesmo quadrado. O componente personalizado será inutilizável pois 2 pinos não podem se sobrepor.


=== trans/panel_switch_input ===

$27545152958344* [right]Entrada[/right]


=== components/Register32 ===

$65405398199118* Memória de 32 bits
$22031255978461* Registrador de 32 Bits


=== trans/panel_maker16_input ===

$17253365231801*
[right]Byte 1
Byte 2[/right]


=== misc/ui_panel/outputs ===

$29350436761480* SAÍDAS


=== trans/component_panel_sprite_input_description ===

$76433786063719*
[b][color=#e49f44]Tipo de comando[/color][/b]
[code]0[/code] Sem requisição
[code]1[/code] [color=#e49f44]Carregar sprite[/color]
[code]2[/code] [color=#e49f44]Definir posição[/color]


=== trans/manual_the_robot ===

$92896462984546* O robô


=== trans/panel_network_output_description ===

$44520675249142*
[b][color=#39aa49]Tipo de evento[/color] (resultados)[/b]
[code]0[/code] Sem novos eventos
[code]1[/code] [color=#39aa49]Conexão entrante[/color] (ID da conexão, Porta)
[code]2[/code] [color=#39aa49]Conexão completa[/color] 
[code]3[/code] [color=#39aa49]Receber dados[/color] (ID da conexão, Dados, Tamanho dos dados)
[code]4[/code] [color=#39aa49]Conexão fechada[/color] (ID da conexão / Código de erro)





=== trans/level_conditions_description ===

$62540112577327* [center]Quando o valor atende à condição, a saída é [img]dialogue/on.png[/img], caso contrário a saída é [img]dialogue/off.png[/img].[/center]


=== trans/panel_program4_output ===

$30314861365347*
Saída 1
Saída 2
Saída 3
Saída 4


=== trans/manual_text_top_the_robot ===

$45646734925323*
A tela mostra o robô e seus arredores.

[img=430]dialogue/screen.png[/img]


=== trans/ide_memory_address ===

$93346467287938* Componentes vinculados


=== trans/panel_clock_input ===

$26264925364981* [right]Ativar [/right]


=== trans/rpg_complete_chest ===

$59394224080614* [center]Baú de Tricksy[/center]


=== levels/delay_level ===

$19986989895202*
Todos os componentes têm um atraso. E em um circuito, o atraso total é determinado pelo caminho mais lento. Isso significa que normalmente você quer colocar as coisas em paralelo.
Neste nível você deve provar que entende esse conceito.
$11246430085016* Nota: você pode ver o caminho do atraso clicando na ampulheta no canto superior direito.
$12817338693402* O atraso de qualquer componente é derivado, em última análise, do atraso das portas básicas, que têm um atraso de 2. Construa um circuito com um atraso de 6 e um custo de portas de 5.
$17854168097855* Verificar


=== trans/panel_dual_load_input ===

$93092890899642*
[right]Carregar
Salvar
Endereço
Salvar valor
Carregar 2
Endereço 2[/right]


=== components/Mul16 ===

$49880767097125* Multiplica duas entradas
$62247409328063* Multiplicar


=== rpg/hat_man ===

$40995289760848* Melhor Chapéu
$31184066972544* Chapéu de Leprechaun
$35778552177922* Chapéu do Papai Noel
$82997731204414* Ótimo preço
$96765749209775* Adoro este chapéu
$97164370529682* Chapéu clássico
$85998153437635*
Vou contar às pessoas que roubei isso
de um policial em Londres
$26278098578888* Quem é Papai Noel?
$47773161384061* Este chapéu é uma piada de mau gosto
$13294635391831* Chapéu de Faraó
$82258891749699* Para onde foi meu dinheiro???
$79556354428080* Capacete de Zelador
$47713748239182* Volte sempre, Robô
$87264083929605* Estou me sentindo esnobe
$12006162361832* Yihaa
$68242068712116* Boné de Beisebol
$35453270895749* Respeite minha autoridade
$93275531091074* Chapéu de Cowbot
$94489310827047* Acho que este chapéu é amaldiçoado
$60834004183919* Chapéu-coco
$50407582286574* Quepe Policial
$98505468673014* Chapéu de Balde de Aba Larga
$30546444635339* Chapéu de senhora
$13395135491753* Me mate agora


=== misc/ui_comment ===

$69987793052607* Comentário do fio (Clique no fio)


=== trans/panel_register16_inputs ===

$96875261858960*
[right]Carregar
Salvar
Salvar valor[/right]


=== trans/options_pipette_wire ===

$96339976117958* Pipeta de fios


=== trans/rpg_complete_flower ===

$15192250170799* [center]Dumio e Gruliette[/center]


=== trans/panel_maker32_input ===

$93209061270494*
[right]Byte 1
Byte 2
Byte 3
Byte 4[/right]


=== trans/level_byte_xor_description ===

$44752799134543* XOR bit a bit pareado


=== dialogue/schematic_hub/share_button ===

$72402014450423* [center]Enviando[/center]
$63199010304839* Compartilhar


=== misc/add_assembly_64bit ===

$33233688912123* [center]Adicionar código assembly[/center]


=== trans/level_complete_wire_comments ===

$92673421413755*
[b]Comentários de fios[/b]
[color=#cccccc][i]Adicione comentários aos seus fios.[/i][/color]


=== trans/panel_regred_input ===

$61209423072819*
[right]Carregar
Salvar
Salvar valor[/right]


=== trans/level_byte_adder_question3 ===

$88075700159266*
[right]Transporte ENTRADA
Byte 1
Byte 2[/right]


=== components/Mux ===

$11168613697835* Alterna entre dois valores
$22167405631310* Mux de 8 Bits


=== components/Switch32 ===

$70717094742809* Chave de 32 Bits
$93061034213009* Alterna um valor


=== trans/panel_counter8_input ===

$50035967147203*
[right]Incrementar / Sobrescrever
Sobrescrever valor[/right]


=== trans/schematic_new_folder_name ===

$86236104278688* Nova pasta


=== trans/panel_output_direction ===

$89612128414294* Direção da etiqueta


=== levels/Nor GATE ===

$11362258372706*
A maioria das criaturas na Terra são agressivas e não conseguem se concentrar.

Para ter sucesso, você deve aprender a pensar logicamente, sem destruir as coisas.


=== trans/level_complete_stats ===

$65428404547905* Estatísticas


=== rpg/maps/overworld/brambert ===

$23133103699795*
Eu trabalho aqui para
economizar e comprar o Melhor Chapéu


=== misc/watchable_state ===

$58678516111149* Conectar componentes


=== components/Xnor64 ===

$64937916903935* XNOR bit a bit entre dois valores
$47129074382309* XNOR de 64 Bits


=== levels/wide_instrucitons ===

$13709034294291* Salvar em tick par, fornecer como saída ambos os bytes em ticks ímpares
$17693995237077* Fornecer como saída ambos os bytes
$19068760748550* Fornecer como saída 0 em ticks pares
$65009239162932* As saídas corretas eram {a} e {b}
$19203973423116* Crie um dispositivo que salva a saída do programa em ticks pares e fornece como saída ambos os bytes em ticks ímpares.
$17409169138995* Salvar o byte


=== main_scripts/input ===

$10186190492148* Clique com ALT para mover a ponta do fio


=== levels/bit_switch ===

$56295261249455*
Se componentes fornecem valores diferentes na mesma conexão, você recebe um erro. No entanto, alguns componentes têm pinos de saída cinzas, estes não fornecem saída alguma quando o componente não está ativado. Este é o caso do componente Chave de Bit.

[img]dialogue/bit_switch.png[/img]

Quando o pino superior está [DESLIGADO], a saída é desativada. Isso significa que mais de um desses pinos de saída cinzas pode conectar à mesma conexão sem causar erro, desde que apenas um deles esteja ativado por vez.
$42793594302151* Usando 2 portas NOT e 2 Chaves, construa uma porta XOR.


=== rpg/maps/overworld/griffith ===

$55209338960432*
Vá até a fazenda de gosma
e colete gosma pegajosa
$96728313107159* Ótimo, você coletou a gosma
$96479154941553* Amanhã eu vou esquiar
$22071068061213* Mais 2 devem bastar
$76381947526292* 4 porções de gosma devem ser o suficiente
$79617816410767* Me ajuda a sair do trabalho, robô
$53961253609599*
Esse barril vai ser servido
no jantar mais tarde
$27173657446279* O quê? Como assim
$75126453723590*
Bom, você coletou
3 porções de gosma da
fazenda
$31359502586908*
Já faltei demais com atestado
preciso de uma desculpa
realmente boa desta vez
$37703435616461* Uma missão nobre
$95279523937415* Mais 3 devem bastar
$76778627086258*
Valeu por me ajudar
a sair do trabalho, cara
$38680695249087*
Então coloque no barril de ensopado
atrás do chef na cafeteria
$10482244323050*
Agora vá e coloque no barril de ensopado
na cozinha, atrás do chef
$24977511637567*
Boa, você coletou
1 porção de gosma da
fazenda
$80959866769801*
Se a gente conseguir fazer
meu chefe comer isso,
talvez funcione
$21601269931093*
Boa, você coletou
2 porções de gosma da
fazenda
$28681635150249* Só falta mais uma
$71867966253273*
Comer gosma pegajosa
deixa você bem mais amigável


=== rpg/maps/prison/dr_rakoo ===

$62085363571678* Dr. Rakoo
$41342441528477* Sangue
$31033960272185* Eu sou o estimado Dr. Rakoo


=== trans/levels_saving_bytes_text ===

$36838510526259*
[right]Ação
Estado desejado
Saída desejada
[/right]


=== trans/level_decoder_1_RichTextLabel2 ===

$50454539040073*
[right][color=#e49f44]Entrada[/color]
Saída 1
Saída 2[/right]


=== components/Rol64 ===

$49017662473189* Rotaciona os bits de uma entrada para a esquerda
$13677051385046* Rotação de 64 bits para a esquerda


=== levels/byte_shift ===

$16023356915123*
A tarefa neste nível é deslocar a primeira entrada para a esquerda pelo valor dado na segunda entrada. A segunda entrada nunca excederá 7.

$37338672894296* Desloque os bits de {value} para a esquerda por {amount}
$10598344098990* [center]Desloque a primeira entrada para a esquerda pelo número de posições dado pela segunda[/center]
$23134220902659* VALOR
$16216408139965*
[color=#e49f44]Deslocar[/color] um valor 1 para a esquerda significa simplesmente mover todos os bits em um byte para a esquerda por 1 posição.
Por exemplo: [color=#e49f44]90 shl 1[/color]

[OFF] [ON] [OFF] [ON] [ON] [OFF] [ON] [OFF] se tornaria:
[ON] [OFF] [ON] [ON] [OFF] [ON] [OFF] [OFF]

Deslocando por 3: [color=#e49f44]90 shl 3[/color]
[OFF] [ON] [OFF] [ON] [ON] [OFF] [ON] [OFF] se tornaria:
[ON] [ON] [OFF] [ON] [OFF] [OFF] [OFF] [OFF]


$29295063752414* DESLOCAR POR
$18137790657923* Além de fornecer um componente de deslocamento à esquerda, também pedimos ao estagiário para criar um componente de deslocamento à direita. Tudo o que ele teve que fazer foi criar a versão espelhada deste esquema.
$18518173140953* Recomendo que você adicione [color=#e49f44]deslocamento à esquerda[/color] e [color=#e49f44]deslocamento à direita[/color] ao seu hardware para níveis futuros.


=== trans/panel_outputlevel_enable ===

$88881816595724* [center]Desativar / Ativar[/center]


=== misc/restore_overture ===

$52008982212566* Redefinir


=== rpg/maps/overworld/bridge ===

$70708048943630* Ponte


=== trans/panel_input_down ===

$70002762618597* Baixo


=== trans/_second_tick_RichTextLabel2 ===

$11680718497014*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual[/right]


=== dialogue/schematic_hub/delete_comment_confirm ===

$52709446588114* Sim
$52823211591830* Tem certeza de que deseja excluir este comentário?


=== components/SpriteDisplay ===

$27510895774306* Display de sprites multicamadas
$49278744667468* Display de Sprites


=== rpg/maps/unseen_fruit/conveyor_belt ===

$45894441609339* Esteira Transportadora


=== misc/ui_panel/left_inputs ===

$16586225094516* ENTRADAS


=== trans/manual_console ===

$73523750891893* Console


=== trans/panel_shl8_input ===

$61388183229084*
[right]Valor
Deslocar por[/right]


=== components/OutputCounter ===

$52247325526438* Contador


=== components/Off ===

$61860786587357* DESLIGADO
$72749460799924* Sempre [DESLIGADO]


=== misc/ide_control_link ===

$80788685813993* Controles do robô


=== misc/options_Score Sync ===

$45371978167502* Sincronização de pontuação


=== trans/map_keys_to_pan ===

$26276191141664* Usar teclado para mover


=== components/Xnor32 ===

$17419057954798* XNOR bit a bit de dois valores
$52489451755306* XNOR de 32 bits


$65542429897149* [center]Enviar saída para controlar o robô[/center]


=== components/Or3 ===

$17576327690867* Porta OR de 3 pinos
$99630419947500* OR de 3 Pinos


=== trans/level_binary_search_description ===

$11976224688780* [center]Recuperar a senha[/center]


=== trans/rpg_complete_derpoo ===

$25534025775791* [center]RIP derpoo[/center]


=== components/Output1Sum ===

$90026011029075* Soma


=== trans/level_binary_programming_description ===

$66247694103179* [center]Adicione 5 à entrada[/center]


=== levels/Add 5 ===

$11540713506719*
Agora você está livre para alterar o programa do seu computador.
Clique no ícone de editar no componente de programa para começar a programar.
$19281970848639* [center]Adicione 5 à entrada (teste {test} de 32).[/center]
$17770257567603* Então, enquanto isso, vamos fazer você ajudar um pouco na nave.
$19446152707984* Clique no ícone de editar memória no componente de programa para começar a programar seu computador. Seu computador deve ler uma entrada, adicionar 5 a ela e fornecer como saída novamente (não precisa se preocupar com overflow).
$12078933051174* Mas como você ainda não sabe programar, você ainda não está pronto para isso.
$11074247151096* Observe que os componentes de registrador vermelho imutáveis foram substituídos por um componente personalizado com funcionalidade idêntica.
$18134632592542* Você construiu seu computador, mas para vencer a competição você ainda precisa terminar o labirinto.


=== trans/not_gate_click_next2 ===

$20820887361993* Clique em "Próximo tick" para ver


=== misc/options_keys ===

$92993941290486* Shift
$65955105101920* Enter do Teclado Numérico
$15851382978562* Esquerda
$12519478101154* End
$99716387921256* Menu de contexto
$78882003890612* TAB
$13781284353315* Em espera
$23041433375813* Lançar Atalho 6
$27874359646701* Aumentar agudos
$65834804441085* Abrir URL
$91413612191819* Lançar Atalho D
$39317622588588* Lançar Atalho E
$31504133014584* Espaço
$27726004575826* Lançar Mídia
$68199202258305* Próxima música
$49442994583673* Tecla Super esquerda (tecla Windows)
$96347674697419* Avançar
$58999281424396* CMD
$59365233304896* Limpar
$17795913351819* Delete
$57038840198662* CTRL
$50955698469296* Lançar Atalho 9
$63772872007214* Parar
$10929402286573* Page Down
$93358816396539* ↓
$71982112085693* Lançar Atalho 7
$28214161279082* Lançar Atalho B
$14976122209522* Insert
$83084380695531* SHIFT + TAB
$70423659540492* Lançar Email
$18970380352793* Alt
$55972860446450* Buscar
$81640191081376* Silenciar volume
$20334952085165* →
$91733527994209* Lançar Atalho 2
$73529460447236* Return
$50389171923636* Backspace
$64108103861848* Atualizar
$86957870260110* Diminuir graves
$79228417307539* Direita
$48472841971511* Favoritos
$94137103361291* Reproduzir
$86664894772851* Lançar Atalho F
$92411601634183* Pausar
$93394348651979* Hyper direita
$57182221632160* Ajuda
$32311987309013* Voltar
$40801064032778* Música anterior
$64963573823520* Print Screen
$11442487736991* Requisição do Sistema
$83183843351576* Lançar Atalho 0
$74172180238771* Scroll Lock
$16897068982305* Tecla Super direita (tecla Windows)
$24086297669523* Diminuir volume
$51594389746074* Lançar Atalho 4
$67529269053604* Página inicial
$39382222147951* Caps Lock
$51120580663479* ESC
$66339874250985* Gravar mídia
$49947924390850* Lançar Atalho 5
$47096285951897* Page Up
$40013272281231* Hyper esquerda
$47330905474433* Aumentar volume
$17043010993255* Parar
$88355661220986* Lançar Atalho C
$78473292327654* ↑
$54347318627968* ←
$25372126469538* Num Lock
$57391159100618* Lançar Atalho 3
$92739814679396* Aumentar graves
$43488085975448* Home
$11908889523442* Reforço de Graves
$17896149617641* Diminuir agudos
$91210884350615* Lançar Atalho 1
$74797401805098* Lançar Atalho 8
$18909108170114* Lançar Atalho A


=== trans/panel_xor_description ===

$92999392068622* [center]Aplica XOR bit a bit em duas entradas[/center]


=== trans/panel_hdd_input ===

$99603056559749*
[right]Buscar
Carregar
Salvar
Salvar valor[/right]


=== trans/overwrite_keep_both ===

$70461062797309* Manter ambos


=== trans/architecture_2 ===

$38100016313511* ARQUITETURA DE CPU 2


=== trans/program_data_width ===

$72687692653533*
[right]Largura dos dados:
[/right]


=== components/Counter32 ===

$87245349851451* Contador de 32 Bits
$92765669828982* Incrementa a cada tick, a menos que seja sobrescrito


=== rpg/maps/prison/sign2 ===

$76218421577794* Placa


=== trans/panel_register8_outputs ===

$72930832545270* Saída


=== trans/options_disagree ===

$60077370372179* Discordar


=== misc/tests_run_all ===

$55533125021199* Executar todos


=== components/NOT ===

$34453052824732* NOT
$90844421681709*
Inverte a entrada
[table=3]
[cell]Entrada[/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Saída[/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]


=== levels/Crude Awakening ===

$12508086025944*
Estamos testando você.

As regras são simples, construa um computador funcional ou você será devorado. Boa sorte.
$16321577947087* Parabéns, você foi abduzido!
$19257730429557*
Um sinal flui da entrada para a saída.
No canto superior esquerdo sob "entrada" há um ícone verde,
clique nele para desativar o componente de entrada.
$17675121574388* Observe que o componente de saída está desativado.\nIsso ocorre porque o sinal parou de fluir do componente de entrada.


=== misc/instr_clone ===

$69090690657232* Clonar


=== levels/byte_or ===

$10368115829346* Mas na verdade está tudo bem porque vocês viveram boas vidas na natureza e não deixamos a carne ir para o lixo.
$15923734370936*
OU bit a bit de cada bit dos bytes de entrada e forneça o resultado como saída.

Por exemplo:
[code]
ENTRADA 1 [ON][ON][OFF][OFF][OFF][OFF][OFF][OFF]
ENTRADA 2 [OFF][OFF][OFF][OFF][ON][ON][OFF][OFF]
SAÍDA     [ON][ON][OFF][OFF][ON][ON][OFF][OFF][/code]

$15226896485081* Você pode achar que é antiético comer todos os terráqueos que não vencem a competição?


=== trans/level_registers_code ===

$40063003736243* [center]OU[/center]


=== trans/instrucitons_header ===

$14831276667273* [center]Instruções[/center]


=== trans/level_the_bus_description ===

$20464862486158* [center]Copie o valor da entrada correta para a saída correta[/center]


=== trans/level_complete_hex ===

$94261690850981*
[b]Hexadecimal[/b]
[color=#cccccc][i]Alterne entre números com sinal, sem sinal e hexadecimais[/i][/color]


=== trans/panel_decoder1_input ===

$62550086102347* [right]Entrada[/right]


=== misc/inst_new_rule ===

$41064305626707* Nova regra


=== levels/always_on ===

$50218226879226* Este nível desbloqueia sua primeira página do manual. Esta é importante, certifique-se de entendê-la.
$17712385236630* Crie um circuito que esteja sempre [LIGADO].


=== rpg/maps/unseen_fruit/control_panel ===

$65321532772341* tomate
$51110810065199* laranja
$88166963001775* melões
$22160541540437* peras
$74579380431603* maçãs douradas
$66873855446862* kiwi
$73302376080596* melão
$32979920031183* kiwis
$15870062259126* amora
$70171621231240* Painel de controle
$60591101734432* maçãs
$66897764153265* Preciso ser programado para apertar isso
$22067281046238* maçã dourada
$94493068600800* 2 {fruit_plural} foram vistos antes do(a) {fruit}
$54127406514854* amoras
$94632554265850* tomates
$37155502172032* laranjas
$84136665661115* pera
$26638472067834* maçã
$96743644544068* Esta foi a primeira instância do(a) {fruit}!


=== dialogue/schematic_hub/delete_confirm ===

$71921976503347* Sim
$46660924781254*
Tem certeza de que deseja
excluir o esquema chamado '{name}'?


=== misc/option_reset ===

$15557473522933* Redefinir


=== trans/level_complete_gate ===

$99373213759665*
[b]Pontuação de portas[/b]
[color=#cccccc][i]Agora você pode visualizar a pontuação de portas de fios e componentes.[/i][/color]


=== components/ByteEqual ===

$39369982838671* Igual
$35668435514829* Verifica se as duas entradas são iguais


=== levels/binary_racer ===

$25272818268849*
[b]RESUMO[/b]

Espero que você tenha notado:
1. Existe exatamente 1 maneira de escrever cada número em binário.
2. O valor de cada dígito é sempre o dobro do dígito anterior.
$16076448195257* Este nível é meu passatempo favorito. Converter decimal em binário sob pressão de tempo.
$37319690622142* Bom trabalho, você alcançou o nível {current_level}.
$19111664765554*
Alterne os bits no painel do nível para que a soma seja igual ao número decimal na pergunta.

Você deve vencer o nível 3 para passar.

(clique [color=#e63e5b][url=accessibility_mode]aqui[/url][/color] para ativar o modo de acessibilidade sem cronômetro)
$11176073682097* Qual é {number} em binário?


=== components/Mul64 ===

$72281597169494* Multiplicar
$11665562499390* Multiplica duas entradas


=== levels/xor_gate ===

$14093358515620*
Isto também é conhecido como uma porta XOR. Este nível é difícil, então não desanime se você não conseguir a resposta imediatamente.
	
[tip]Você pode conectar uma saída a mais de 1 porta.[/tip]
$19182751521677* No último nível você construiu um circuito que ficava [ON] quando estávamos no segundo tick. Neste nível construa um circuito que fica [ON] quando estamos no segundo OU terceiro tick.


=== components/Bidirectional64 ===

$82412839066570* Pino Bidirecional de 64 bits
$24932613021646* Pode contornar certos erros de dependência circular


=== trans/level_complete_profile ===

$78783902500954*
[b]Perfil online[/b]
[color=#cccccc][i]Encontre-o no menu principal.[/i][/color]


=== trans/panel_network_input_description ===

$36399689035136*
[b][color=#e49f44]Comando[/color] (argumentos)[/b]
[code]0[/code] Sem requisição
[code]1[/code] [color=#e49f44]Escutar[/color] (Porta)
[code]2[/code] [color=#e49f44]Conectar[/color] (IP, Porta)
[code]3[/code] [color=#e49f44]Enviar dados[/color] (ID da Conexão, Dados, Comprimento dos dados)
[code]4[/code] [color=#e49f44]Fechar[/color] (ID da Conexão)
[code]5[/code] [color=#e49f44]Ler próximo evento[/color]


=== rpg/maps/prison/sign_1 ===

$88221977354540* Placa
$74189085130186*
Está escrito: O botão
abre as portas da prisão


=== levels/byte_nand ===

$76462832199594* Crie um circuito que executa NAND bit a bit em dois bytes.


=== components/Maker32 ===

$82420653444614* Transforma 4 bytes em um valor de 32 bits
$85308499118176* Criador de 32 Bits


=== rpg/maps/overworld/space ===

$70779117877705* Contemple a vastidão do espaço
$12015430928135* Espaço


=== trans/panel_output_output_3 ===

$94657695889458* Saída 4


=== dialogue/dotMatrixtext_link ===

$82486902873499*
O pino de cor usa os bytes 2, 3 e 4 para [color=#dd6576][url=RGB color]cor RGB[/url][/color] (byte 1 não é usado)
O pino de pixel usa os bytes 2, 3, 4, 5, 6 e 7 para selecionar pixels a serem coloridos, onde cada bit corresponde a um pixel. As atualizações só ficam visíveis quando o byte 8 é definido como 1, isso "descarrega" as mudanças e atualiza a exibição visualmente.

Tanto "Ativar X" quanto "Ativar Y" devem estar ligados para atualizar a exibição.


=== rpg/maps/overworld/door4 ===

$66194643935592* Porta secreta


=== trans/panel_decoder3_output ===

$41412072467493* Apenas 1 ativa


=== rpg/maps/prison/prision_door ===

$64702123078518* A porta está trancada
$42385408716570* Porta


=== misc/add_code_name ===

$57358078712675* Salvar


=== components/Hdd ===

$75645507178296* HDD
$78558655732992* Memória persistente


=== rpg/maps/spacial_invasion/space_rat ===

$72504258410857* Os ratos espaciais chegaram muito perto
$94470860110909* Rato espacial
$67254986543263* Se eu tivesse sido programado para fazer isso\nisso teria completado o nível


=== ui/state_ui/title_screen/exit ===

$12639868461113* sair


=== trans/panel_fulladder_output ===

$18502107482550*
Resultado
Transporte


=== trans/options_waiting ===

$58990937331663* Aguardando


=== misc/ui_panel/memory ===

$65362728703588* MEMÓRIA


=== trans/ide_add_assembly_header ===

$94462268558066* [center]Adicionar código assembly[/center]


=== trans/panel_output_output_2 ===

$33211646632666* Saída 3


=== levels/any_doubles ===

$16587030847545* Por sermos tão avançados tecnologicamente, temos máquinas que dobram nossas meias. Infelizmente, o circuito que detecta pares de meias quebrou na máquina.
$14373083988184*
Este nível tem 4 entradas.
Forneça saída [ON] quando 2 ou mais delas estiverem [ON].

[tip]Não complique demais este nível.[/tip]


=== trans/panel_rom_output ===

$80688779703520* Saída


=== components/DelayLine1 ===

$30487770736917* Linha de Atraso
$38206009264853* Fornece como saída a entrada deste tick, no próximo tick


=== components/Neg64 ===

$88458190974122* Negar
$52206550732945* Nega a entrada


=== rpg/maps/unseen_fruit/door2 ===

$66022312281343* Porta


=== misc/ide ===

$80281780593326* {nr} PERS
$33302419528314* {nr} CONT
$57584872924662* {nr} SAÍDA
$66077393938044* {nr} REG
$57192021095756* {nr} FIO
$89311802272165* {nr} BIT
$18255035821811* {nr} RAM


=== components/DelayLine32 ===

$56616725618490* Fornece como saída a entrada deste tick, no próximo tick
$49292282287971* Linha de Atraso de 32 Bits


=== components/Nand64 ===

$27197172037913* NAND de 64 Bits
$66590147372797* NAND bit a bit de dois valores


=== misc/run_fast ===

$54853798559740* Executar mais rápido (clique direito: alterar velocidade alvo)


=== misc/confirm_factory_reset ===

$65699778604521* Excluir tudo


=== trans/panel_off ===

$61047424972631* Sempre


=== component_panels/Output8zLevel ===

$35707954769868* Não ativado


=== components/Nor64 ===

$17208777467974* NOR bit a bit de dois valores
$72509242083648* NOR de 64 Bits


=== trans/panel_hdd_description ===

$28038932532386*
[center]No disco rígido, a "posição da cabeça" determina em qual endereço as leituras e escritas ocorrem. Use o pino de busca de 8 bits com sinal para alterar a "posição da cabeça".
Use um valor de busca 0 se você não quiser alterar a posição.[/center]


=== trans/panel_or_description ===

$65281182019602* [center]Aplica OU bit a bit em duas entradas[/center]


=== trans/panel_input_input_3 ===

$21321167572284* Entrada 4


=== levels/Delicious Order ===

$10160261151833* Primeiro leia as 15 pontuações de deliciosidade da entrada uma por uma. Sua tarefa é fornecê-las como saída em ordem classificada, da menor para a maior.
$16027225087666* Estamos atualizando a enciclopédia galáctica de alimentos, inserindo comidas humanas. Como não temos um alfabeto, as entradas na enciclopédia são ordenadas por deliciosidade.


=== trans/manual_network_label ===

$90392202103470* Digite um IP aqui para convertê-lo em um inteiro


=== trans/panel_rol_input ===

$95166818170185*
[right]Valor
Rotacionar por[/right]


=== components/Equal64 ===

$34603983706314* Verifica se as duas entradas são iguais
$82876546747608* Igual


=== trans/manual_component_factory ===

$35460636622618* Fábrica de componentes


=== trans/options_status ===

$35063135798145* Status


=== levels/Tower of Radioactive Alloy ===

$13757925963562* Especificamente, queremos que você mova pilhas de discos radioativos de um reator antigo. Apenas certifique-se de não colocar um disco maior em cima de um disco menor ou a nave inteira vai explodir.
$10750976989948*
As primeiras 4 entradas fornecerão o seguinte em ordem:
disk_nr - O número do disco mais alto na pilha (2 a 4)
source - De qual número de localização mover
destination - Para onde mover a pilha
spare - O 3º local que não é nem a origem nem o destino

Controle o guindaste com as seguintes saídas:
0 - Mover o ímã para o local 0
1 - Mover o ímã para o local 1
2 - Mover o ímã para o local 2
5 - Alternar o ímã ligado ou desligado

Brinque com o ímã manualmente usando as teclas de seta para mover e enter para alternar.
$19265994465686* Precisamos que você ajude a limpar o porão.
$35120623183961* Mover de {source} para {destination}
$15855497886737*
Implemente o seguinte algoritmo:

Algoritmo Torre de Hanói:[code][color=#87a8c8]
func move(disk_nr, source, dest, spare):
	if disk_nr is 0:
		move disk from source to dest
	else:
		move(disk_nr - 1, source, spare, dest)
		move disk from source to dest
		move(disk_nr - 1, spare, dest, source)[/color][/code]

[tip]Empilhe valores de registrador na pilha para salvá-los antes de chamar uma função que os altere.[/tip]


=== trans/manual_universal_gates ===

$28345532918560* Portas universais


=== trans/map_functions ===

$83960548773205* FUNÇÕES


=== components/Input 1 Byte ===

$90785720285146* Entrada de 8 Bits


=== trans/panel_probewirebit_value ===

$24213353038685* [center]Valor[/center]


=== trans/hub_type ===

$23829497228009* Tipo


=== trans/manual_text_binary ===

$69488982380310*
Os números aos quais você está acostumado são de base 10, aqui quando adicionamos um 0 ao lado direito de um número, seu valor aumenta 10 vezes.

Binário é base 2, então fazer o mesmo apenas o duplica. Em outras palavras, cada dígito representa uma potência de 2. Por exemplo, com [color=#c54d5e]base 2[/color] e [color=#e49f44]base 10[/color] codificadas por cor:
[color=#c54d5e]    1[/color] = [color=#e49f44]1[/color]
[color=#c54d5e]  10[/color] = [color=#e49f44]2[/color]
[color=#c54d5e]100[/color] = [color=#e49f44]4[/color]

Para representar 6, podemos simplesmente somar 4 e 2:
[color=#c54d5e]110[/color] = [color=#e49f44]6[/color]

Adição, multiplicação e tudo mais funciona da mesma forma que base 10, exceto que você transporta quando atinge 2 em vez de 10.


=== panel_sound_sound_picker ===

$73758040671294* Notas (clique em [i][/i] para substituir)


=== trans/level_alu1_description ===

$90245779080897*
[center]Aplica OR, NAND, NOR ou AND
aos dois bytes[/center]


=== components/Program1Red ===

$26811947547688* Componente de memória programável
$55594749714809* Programa


=== nim/backend_lib/assembler ===

$46709301132173* Linha {line}: Apenas um nome vai após \"label\" (ex: label pular_aqui)
$91607161873807* Linha {line}: Precisa de um nome e um valor após \"const\" (ex: const atirar 5)
$29335866080065* Linha {line}: Argumento de \"set_input\" deve resolver para um número
$27717388396189* Linha {line}: Precisa de um índice de estado observado e um valor após \"expect\"
$81373400907688* Linha {line}: Algum tipo de erro aqui
$95834288706682* Linha {line}: Precisa de um valor após \"set_input\"
$65326376775481* Linha {line}: Precisa de um nome após \"label\" (ex: label pular_aqui)
$23247597342508* Linha {line}: A palavra-chave \"set_input\" não funciona neste nível.
$49738057919794* Linha {line}: Apenas um nome e um valor vão após \"const\" (ex: const atirar 5)
$54823996766711* Linha {line}: Segundo parâmetro inválido para \"expect\"
$15087417947547* Linha {line}: Apenas um índice de estado observado e um valor vão após \"expect\"
$39128060960831* Linha {line}: A palavra-chave \"expect\" não funciona neste nível.
$34201706604320* Linha {line}: Arg 1 de \"expect\" deve ser um número (índice de estado observado)
$80435549997833* Linha {line}: Constante inválida


=== misc/dir_delete ===

$94436541903929* Arquiteturas: {list}
$17985924005596* Contém {nr} esquemáticos.
$51791491383290* O componente personalizado é usado em
$63013773025775* Tem certeza de que deseja excluir {file_name}?
$38011567415872* A pasta está vazia.
$57790786178566* Componentes personalizados: {list}


=== rpg/maps/overworld/bed ===

$19781388766480* Cama
$41698807327261* Adoro olhar para móveis aleatórios


=== levels/little_box ===

$17142958857584* A OU B
$12901484249817* Você consegue encaixar 4 bytes de memória neste espaço limitado?
$14218335256117*
Em nossa civilização avançada, forçar prisioneiros a fazer tarefas extremamente servis é escravidão e tecnicamente ilegal.
	  É por isso que, em vez disso, fizemos nosso estagiário criar a versão de 256 bytes do seu componente.
$19282543476901* 1
$13765566466116* NÃO SALVAR
$15908016538045* VALOR
$16196915566111* 0
$32676754026463* Salvar {value} e carregar
$30856781458049* Salvar {value}
$14259545926196* A
$12306130287676*
Neste nível você precisa construir um circuito que
pode [SALVAR] ou [CARREGAR] de 4 bytes diferentes de memória.

Você recebe 1 bit que determina se deve [CARREGAR]. Outro bit determina se deve [SALVAR] e vem com um valor correspondente.
Além disso, você tem 2 bits de endereço.

Com 2 bits, existem 4 combinações, uma para cada byte de memória neste nível.
[i][tip]Una os fios no meio e use ângulos retos ou isso será uma bagunça.[/tip][/i]
[i][tip]A barra de espaço rotaciona componentes.[/tip][/i]

A saída tem um pino de ativação, ative-o apenas em [CARREGAR].
$16217965518477* B
$10891070331034* B
$18084166025569* Nada
$13082830776248* NÃO CARREGAR
$17473197268827* CARREGAR
$13555908976270* 0 OU 1
$10311371309532* SALVAR
$16925432534232* CARREGAR
$13644027370563* Carregar
$12933801309767* A
$12291627335021* SALVAR


=== trans/ide_binary_header ===

$22615032668969* Editor Binário


=== trans/level_registers_text ===

$78241632854567*
[right][color=#e49f44]Entrada de
Código[/color][/right]


=== trans/panel_cond_input_0 ===

$59435425554599* Bit 0:


=== levels/program ===

$16693098943939*
O componente de entrada [INSTRUCTION] foi removido. Ele foi substituído por um componente de programa. A cada tick, use o contador para carregar a próxima [INSTRUCTION] da memória do programa.
	
Você deve usar o componente contador que desbloqueou anteriormente para este nível.
$19686277478479* O programa ainda está fornecendo como saída a primeira instrução. Você conectou um contador?


=== trans/hub_status ===

$64105077092961* Baixando...


=== trans/manual_components ===

$40288888375581* Componentes


=== levels/capitalize ===

$14894954428144*
As entradas neste nível representam os caracteres em uma lista de nomes de planetas, codificados como ASCII (veja o manual). Cada nome é separado por um espaço que tem o valor numérico 32. Substitua a primeira letra de cada palavra por sua versão maiúscula.
(Os caracteres de entrada possíveis são a até z minúsculos, espaço, apóstrofo e hífen)
$13301617098810* Tínhamos o estagiário digitando nomes de planetas em escrita humana. Infelizmente, ele esqueceu de capitalizar cada nome.
$11647445869837* Entrada: 
$11201813578269* Saída:


=== levels/byte_equal ===

$17156565273196* Saída [LIGADA] quando ambas as entradas são iguais.


=== trans/levels_counting_signals_RichTextLabel2 ===

$34604121212779*
[right]Entrada 1
Entrada 2
Entrada 3
Entrada 4[color=#e49f44]
Saída desejada
Saída atual[/color][/right]


=== trans/panel_delayline1_output ===

$99213923469748* Saída


=== trans/level_program_text ===

$38014836341470*
[right][color=#e49f44]Entrada de
Código[/color][/right]


=== trans/map_memory ===

$58330421958143* MEMÓRIA


=== trans/manual_text_matrix ===

$75170402412137*
[b]Exibindo letras[/b]
Por coincidência, um espaço de pixel de 5x7, embora pequeno, ainda consegue renderizar letras de forma clara. Ao adicionar uma linha e coluna extras, essas letras também ficarão bonitas quando colocadas uma ao lado da outra.

[center][img]dialogue/manual/matrix_letter.png[/img][/center]


[b]Pequena tela modular[/b]
Rotacionando o componente, você obtém 8x6 pixels, que tem uma proporção agradável de 4:3 e, ao colocar vários juntos, você pode obter a maioria das resoluções desejadas. A forma como os pinos estão configurados neste componente foi especificamente projetada para permitir modularidade. Imagine o design ingênuo de pinos onde cada componente é ativado por um único bit. Isso exigiria que você conectasse 1 fio para cada componente. Nessa situação, o número de fios necessários para uma tela modular escalaria com a área, enquanto o espaço necessário para encaixar fios entre componentes escalaria com o perímetro.

[center][img]dialogue/manual/tilable_screen.png[/img][/center]

Em vez disso, ao ter 2 pinos de ativação, um fio pode ativar uma linha inteira e outro uma coluna inteira. Dessa forma, um único componente pode ser selecionado pela sua combinação única de linha e coluna. Além disso, encaixar o resto dos dados nos mesmos fios significa que os espaços horizontais e verticais só precisam ter 1 quadrado de largura. Este componente ocupa visualmente meio quadrado extra em todos os lados, de forma que esses componentes possam ser organizados perfeitamente pixel a pixel, com 1 quadrado oculto entre eles para passar os fios.


=== trans/level_complete_stat_time ===

$39203727515285* Tempo


=== rpg/maps/overworld/blankidork ===

$19291766514049* Estamos lutando contra a rebelião


=== ui/options/General ===

$36195388998735* Geral


=== trans/levels_double_the_number ===

$41609125516676* [center]Dobrar o número[/center]


=== trans/panel_full_adder_input ===

$67545680105541*
[right]Entrada 1
Entrada 2
Entrada 3[/right]


=== trans/level_delay_level_description ===

$24326379952614* Crie um circuito que custe 5 PORTAs e 6 ATRASO


=== trans/panel_max_data_len_max_data_length ===

$88063177433135* [right]Comprimento máximo de dados[/right]


=== trans/level_spacial_invasion_description ===

$44980627299841* [center]Atire nos ratos espaciais![/center]


=== levels/registers ===

$10661964231175* Eu travei os componentes vermelhos deste nível no lugar, já que você sempre faz uma bagunça e não deixa espaço suficiente. A bagunça que você fizer de agora em diante é salva entre os níveis, você não consegue mais começar do zero a cada nível.
$10211777161405*
Estes são os padrões de bits para cada [color=#c54d5e]origem[/color] e [color=#e49f44]destino[/color].

[color=#c54d5e]Origem[/color]:
[OFF] [OFF] [OFF]  REG 0 
[OFF] [OFF] [ON]  REG 1 
[OFF] [ON] [OFF]  REG 2 
[OFF] [ON] [ON]  REG 3 
[ON] [OFF] [OFF]  REG 4 
[ON] [OFF] [ON]  REG 5 
[ON] [ON] [OFF]  ENTRADA 
[ON] [ON] [ON]  NÃO USADO

[color=#e49f44]Destino[/color]:
[OFF] [OFF] [OFF]  REG 0 
[OFF] [OFF] [ON]  REG 1 
[OFF] [ON] [OFF]  REG 2 
[OFF] [ON] [ON]  REG 3 
[ON] [OFF] [OFF]  REG 4 
[ON] [OFF] [ON]  REG 5 
[ON] [ON] [OFF]  SAÍDA
[ON] [ON] [ON]  NÃO USADO

Para ter uma compreensão mais intuitiva dos requisitos, clique no ícone [INSTRUÇÃO] no canto superior esquerdo.
$15888345020710*
Neste nível você precisa criar um circuito que possa copiar de uma [color=#c54d5e]origem[/color] para um [color=#e49f44]destino[/color]. 

O byte de instrução neste nível determina a [color=#c54d5e]origem[/color] e o [color=#e49f44]destino[/color]. 

Os bits 1, 2 e 3 fornecem o [color=#e49f44]destino[/color]. Os bits 4, 5 e 6 fornecem a [color=#c54d5e]origem[/color].
$14823499195861* Abra "Instruções" na barra superior
$14108238519744* Hora de criar seu projeto mestre, implementando a arquitetura de computador [color=#e49f44]OVERTURE[/color]. Esta será uma máquina verdadeiramente Turing completa, um computador real em todos os sentidos!
$14041158687959*
[color=#c54d5e]Origem[/color] e [color=#e49f44]destino[/color] podem ser 1 de 6 registradores, vamos nomeá-los REG 0 a REG 5 respectivamente. 
	
Além disso, este mapa tem um componente de entrada dedicado, que pode ser a [color=#c54d5e]origem[/color] e um componente de saída, que pode ser o [color=#e49f44]destino[/color].


=== components/Ashr32 ===

$57867060876326* Deslocamento Aritmético de 32 Bits para a Direita
$77878150504241* Desloca bits para a direita, mantendo o sinal do número


=== misc/level_gate_manual_icon ===

$22002156022920* Desbloqueia entrada manual


=== components/DotMatrixDisplay ===

$18651725958642* Display de Matriz de Pontos 6x8
$71512568789377* Display de 6x8 pixels


=== rpg/maps/overworld/fuel ===

$99170934143071* Combustível do núcleo


=== trans/panel_and_description ===

$62144934019319* [center]Executa E bit a bit em duas entradas[/center]


=== levels/Masking Time ===

$19351773688761* Ticks restantes: {ticks_left}  Entrada: {input}
$16810715868480* Calcule o módulo 4 da entrada.
$17375862136921*
O comprimento da nossa semana é de 4 dias. Nossos dias da semana são chamados de Dia do Zero, Dia do Um, Dia do Dois e Dia do Três. Ouvi dizer que alguns terráqueos numeram seu Dia do Dois incorretamente? 
	
Isso realmente não me surpreende.
$65431688078892*
Neste nível você recebe um número como entrada e deve retornar esse número módulo 4 como resultado.

O desafio é que você tem apenas {ticks_per_test} ticks para fornecer o resultado desejado.

Observe que você não precisa alterar seu hardware, apenas precisa descobrir o truque para fazer módulo 4 rapidamente.
Use [color=#e63e5b][url=masking_time]esta dica[/url][/color] se ficar travado.
$81055582534899* De qualquer forma, o ano novo está chegando e queremos que você calcule o dia da semana do aniversário de todos. Daremos a data e tudo que você precisa fazer é retornar o dia da semana em {ticks_per_test} ticks.


=== components/Console ===

$66743357915699* Console
$16105755937680* Display de texto 80x24 caracteres


=== rpg/maps/overworld/oozla ===

$72859292385128*
Dizem que pode fazer aritmética
usando quaisquer dois registradores,
armazenando o resultado em qualquer lugar
$41963791304712*
Mas é apenas uma história para crianças,
tais heróis existem apenas em contos de fadas
$91713298019390*
Dizem que o computador deles
carrega mais de 1 byte por vez
$43108829077557*
São lendários por criar um
computador poderoso e
resolver o problema dos resíduos radioativos
que ameaça esta nave
$60555049113315*
Alguns dizem que terá pelo menos
endereços de memória de 4 bits,
endereçando 16 locais de memória
$52580048139802* A profecia fala de um herói que virá


=== components/LessI16 ===

$75600169624828* Menor que (com sinal)
$73697238171042* Verifica se uma entrada é menor que a outra


=== trans/label_input_input_0 ===

$83039286441109* Entrada 1


=== trans/level_constants_description ===

$34641396464207* [center]Adicione carregamento de constantes à sua arquitetura[/center]


=== trans/manual_circular_dependency ===

$40263928358112* Dependência circular


=== trans/component_panels_sprite_inputs ===

$89388086235988*
[right][color=#e49f44]Tipo de comando[/color]
ID do Sprite
Posição
Tamanho[/right]


=== trans/panel_keyboard_right ===

$20567291616294*
Valor da tecla
Tecla solta


=== trans/panel_equal_output ===

$15175350110347* Saída


=== trans/panel_on ===

$77349453746493* Sempre


=== misc/profile ===

$32835651830157* perfil


=== trans/panel_sound_inputs ===

$45047777963599*
[right]Nota
Tom (com sinal)[/right]


=== components/BeepBox ===

$16713357727925* Componente de som com 256 tons customizáveis e controle de altura.
$11041223461254* Som


=== trans/panel_clock_output ===

$47697250900761* Tempo UNIX em microssegundos


=== components/Bidirectional32 ===

$54631386552063* Pino Bidirecional de 32 bits
$35105566244017* Pode contornar certos erros de dependência circular


=== misc/specifications ===

$56390619785555* Visualizar definições de instruções
$68054407020318* Instruções


=== trans/manual_component_factory_text ===

$42847481618884*
Abra a fábrica de componentes clicando neste botão [img]dialogue/manual/component_factory_icon.png[/img] na barra superior esquerda.

A fábrica de componentes permite que você crie seus próprios componentes. A lógica que você coloca determina o comportamento do componente personalizado e o layout determina o formato.

Os componentes de entrada e saída que você coloca se tornam pinos no componente. Como em outros componentes, uma saída de componente levando de volta à sua entrada causa uma dependência circular. Saídas tendo um caminho de volta às entradas causa uma dependência circular para componentes personalizados, mesmo que o interior do componente sugira que não deveria haver uma. Não ter que se preocupar com o interior dos componentes reduz a complexidade de construções maiores, no entanto, essa abstração rígida pode ser inconveniente em certas circunstâncias. Nesse caso, use os pinos sem buffer. Eles permitem fluxo bidirecional e usam o interior do componente para verificar dependências circulares.

Sondas colocadas em componentes personalizados aparecerão em seu layout e podem exibir valores internos. Sondas podem ser conectadas a outros componentes personalizados, para que valores profundamente aninhados possam ser exibidos. Valores sondados dessa forma também podem ser conectados ao componente de programa.

Para a fábrica de componentes, o gerenciador de arquivos também gerencia os componentes personalizados. Os nomes dos arquivos decidem o nome do componente e a estrutura de pastas decide o posicionamento dos componentes no menu.


=== misc/network_update ===

$47639082058046* Nada aqui ainda

# Showing what components are used in schematics in the hub
$83560387278127* Derivado de: 
$86830276924898* Enviado:
$15762392983604* Tamanho:

# If the hub can't load a schematic for some reason
$76023068123024* Erro
$70694384106281* Criador:
$81675147704214* Usa o componente de rede
$98151734218561* [center][color=#60a96b]Upload concluído.[/color][/center]
$40010486743721* [center][color=#dd6576]Falha no upload.[/color][/center]


=== trans/level_complete_stat_delay ===

$43118901497406* Atraso


=== components/NetworkClient ===

$44510554000571* Rede
$90462653419289* Gerencia conexões de rede


=== rpg/maps/overworld/door2 ===

$40757019106897* Porta


=== trans/options_animation_speed ===

$13442839894535* Velocidade da animação dos fios


=== trans/levels_negative_descriptions ===

$87964635915702*
-127 a 127 representáveis:
0 a 127 igual a antes:
Funciona com somador:


=== components/Counter16 ===

$37313834107391* Incrementa a cada tick, a menos que seja sobrescrito
$49104925799943* Contador de 16 Bits


=== trans/panel_cond_input_1 ===

$99239506734191* Bit 1:


=== trans/panel_splitter32_output ===

$18283412227212*
Byte 1
Byte 2
Byte 3
Byte 4


=== rpg/maps/overworld/barrel7 ===

$56979881178765* Este é um barril
$19922359571673* Barril de Ensopado


=== components/Splitter32 ===

$90978982016052* Divide 32 bits em 4 bytes
$24096666569346* Divisor de 32 bits


=== dialogue/schematic_hub ===

$22639280459994* Baixando lista...


=== trans/panel_neg_input ===

$92219875545393* [right]Entrada[/right]


=== components/Program64 ===

$38310909505735* Programa
$76480303942112* Componente de memória programável


=== components/Shl64 ===

$56766765894165* Desloca os bits de uma entrada para a esquerda
$37014604954362* Deslocamento de 64 bits para a esquerda


=== trans/level_byte_mux_description ===

$20538476756633* [center]Forneça como saída o byte de entrada correto[/center]


=== trans/options_cluster_color ===

$77850745497963* Aplicar cor ao conjunto de fios


=== misc/continue ===

$93610185550877* Continuar


=== trans/panel_program_1inputs_label ===

$85358271811851* [right]Editar componentes vinculados[/right]


=== nim/backend_lib/schematics ===


# Default assembly instructions
$98784625122112* add 68\nreg0_to_reg1 129\nreg0_to_reg2 130\nreg3_to_out 158

# Decoder pin name
$80846046332059* CONDIÇÃO

# Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$43762760711440* 3 Condições.assembly

# For the default OVERTURE instruction menu
$36937658066516* E
$25378963142694* Entrada 2

# For the default OVERTURE instruction menu
$34688070019016* Calcular
$80984147393241* OPCODE
$23343928938611* CÁLCULO
$48524980499900* VALOR

# For the default OVERTURE instruction menu
$89904818945500* Sempre
$25947122599583* EMPILHAR

# For the default OVERTURE instruction menu
$41384200516164* Entrada
$52720470197560* Condição

# For the default OVERTURE instruction menu
$58135326697989* Saída
$21762287720058* Padrão

# For the default OVERTURE instruction menu
$45098916684469* Nunca
$69871887031160* Resultado

# For the default OVERTURE instruction menu
$77964040770330* SOMA

# For the default OVERTURE instruction menu
$90287016519308* NÃO USADO
$17900992684779* Entrada

# For the default OVERTURE instruction menu
$23756602199977* NAND
$98979865390652* SAÍDA
$30360644331285* REMOVER

# For the default OVERTURE instruction menu
$52155313885654* Condição

# Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$55885017410507* 0 Carregamento imediato.assembly

# Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$38851635485723* 2 Cálculos.assembly

# Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$84575312492466* 1 Cópia de registradores.assembly

# Default program the first time you open binary search
$28582639590579* # Crie rótulos assim\nlabel meu_rotulo\n# Isso é uma constante\nconst PI 3\n# Você também deveria dar uma olhada\n# na entrada do manual de assembly

# For the default OVERTURE instruction menu
$49207579633810* NOR
$97114869841400* Saída
$23432943836287* exemplo
$15697933732634* Instrução

# For the default OVERTURE instruction menu
$98586044504803* Copiar

# For the default OVERTURE instruction menu
$87661236574161* Imediato

# For the default OVERTURE instruction menu
$43346201280348* SUB
$50176996454102* IMEDIATO
$47025412277453* Entrada 1
$38100656631435* COPIAR

# Default code seen when first opening the IDE
$46866969777934* # Eu sou um comentário!\n# Abaixo calcula 1 + 1\n1\nreg0_to_reg1\nreg0_to_reg2\nadd\nreg3_to_out

# For the default OVERTURE instruction menu
$63749396808309* OU


=== levels/xor ===

$11589029892097* Faça um XOR entre os bits das entradas {a} e {b}
$12758156517177* Usando as instruções do seu computador, leia a entrada duas vezes e faça um XOR entre os dois valores
$16047615798435* [center]Leia a entrada duas vezes e faça um XOR entre os bits das duas entradas[/center]


=== trans/level_byte_or_text ===

$99465606386164*
[right]
[color=#e49f44]Entrada[/color]
Saída desejada
Saída atual
[/right]


=== trans/panel_not_output ===

$74796974148718* Saída


=== trans/manual_simulator ===

$19932404521621* Simulador


=== trans/panel_output ===

$19698504808819*
Resultado
Transporte SAÍDA


=== rpg/maps/boss_room/door2 ===

$48251720560954* Porta da masmorra


=== levels/the_bus ===

$28468611444223* SAÍDA 1
$67465559416096*
Este nível tem 2 entradas de byte e 2 saídas de byte. Seu objetivo é copiar de 1 das entradas para 1 das saídas.
	
O primeiro bit de entrada determina de qual entrada você deve copiar. O segundo bit de entrada determina para qual saída você deve copiar.

Confira [color=#e63e5b][url=the_bus]esta dica[/url][/color] se ficar travado.
$52612646660710* ENTRADA 0
$97971478046986* ENTRADA 1
$73177632038973* SAÍDA 0
$71428957264410* ENTRADA 1
$72472660427162* [center]Copie o valor da entrada {input_nr} para a saída {output_nr}[/center]
$96958133516462* DE
$91318587712792* PARA
$72709070901789* SAÍDA 1
$36872979988941* ENTRADA 0
$33984298968523* SAÍDA 0
$85140574084420* [center]Copie o valor da entrada correta para a saída correta[/center]


=== components/Ram ===

$95418291334002* RAM de 256 Bytes
$27094240214067* Componente de memória


=== components/Constant16 ===

$85825068431072* Constante de 16 Bits
$61330657823382* Valor constante


=== levels/and_gate_3 ===

$14788981567936* Crie uma porta AND com 3 entradas.


=== components/DivMod16 ===

$42657221816637* Divide e mod 2 números
$22319923069746* Dividir


=== components/MemoryProbeBit ===

$13846578075327* Exibe um valor no seu componente personalizado ou no editor de programa
$25103579211328* Sonda de Memória (bit)


=== trans/level_byte_mux_text ===

$44961981616677*
[center]Sua resposta 11 + 88 = 0
Resposta atual 11 + 88 = 99[/center]


Nenhum


=== components/DualPortRam ===

$13408945557666* RAM com um pino de carregamento extra
$30400404542678* RAM de Carregamento Duplo


=== components/Switch64 ===

$80980797636768* Alterna um valor
$93223372486795* Chave de 64 Bits


=== misc/delay_overlay ===

$85430022417382* Mostrar atraso


=== levels/push_pop2 ===

$10062117579269* Adicione a pilha ao seu computador
$14685569269160*
Neste nível você deve adicionar a pilha ao seu computador e escrever o programa que resolve o nível.
Quando a entrada for 0, você deve [color=#e49f44]remover[/color] um valor da pilha e fornecê-lo como saída. Quando a entrada não for 0, você deve [color=#e49f44]empilhar[/color] na pilha.
$18561605111721* EMPILHAR {input} na pilha
$59658696292688* REMOVER {value} da pilha


=== rpg/maps/overworld/crate ===

$37606760989079* Detritos
$78128919991233* Caixa


=== trans/level_codes_description ===

$24678249110160* [center]Adicione códigos de cálculo ao seu circuito[/center]


=== trans/text_truth_table_left ===

$58617980046951*
[right]Entrada 1
Entrada 2
Saída[/right]


=== dialogue/schematic_hub/load ===

$41294322771286* Carregar
$44524092309946* Carregando...


=== rpg/maps/overworld/musli ===

$21621435534103* Isso não faz sentido algum.
$20939310165945*
Por que o mesmo combustível sai
do núcleo e depois
entra novamente?


=== rpg/maps/overworld/purple_flower ===

$70367070546819* Parece uma flor
$91230192040939*
Esta deve ser a flor
que Gruliette queria
$25076873142666* Flor rosa


=== trans/panel_segment_value ===

$97585846659258* [center]Valor[/center]


=== trans/manual_delay ===

$78806697204524* Atraso


=== trans/panel_constant_output ===

$14868502983738* Saída


=== rpg/maps/cave/door4 ===

$59392168282288* Porta da masmorra


=== rpg/maps/unseen_fruit/gulgramush ===

$35182545479584*
Não quebre as paredes
Robô mau


=== trans/rpg_alloy_enter ===

$47375100278801* [center]PRESSIONE RESET PARA TENTAR NOVAMENTE[/center]


=== components/Program8_1 ===

$11057354704814* Componente de memória programável
$12805545963716* Programa


=== levels/crude_awakening/next_level ===

$24027424800887* Próximo nível


=== trans/level_alu2_description ===

$37432913848309* [center]Faça OR, NAND, NOR, AND, ADD ou SUB dos dois bytes[/center]


=== components/Nor8 ===

$34517798310461* NOR bit a bit de dois valores
$39421972053612* NOR de 8 Bits


=== trans/level_complete_stat_gate ===

$95192766583497* Porta


=== levels/signed_negator ===

$10866019808027* Para este nível, você provavelmente vai querer ativar números com sinal, para que o bit mais alto apareça como -128. Clique em "+255" localizado no painel superior.
$10400106910274*
Considerando a entrada como com sinal (onde o 8º bit é -128), crie um componente que receba um número e o negue.
Por exemplo, 4 negado se tornaria -4. -9 negado se tornaria 9.


=== trans/level_circumference_subscript ===

$80632450818467* [center][color=#cccccc](Assumindo π ≈ 3)[/color][/center]


=== trans/panel_output_output_0 ===

$44355002441998* Saída 1


=== trans/overwrite_discard ===

$78824878529707* Descartar


$22687523145097* Ausente


=== trans/level_xnor_RichTextLabel2 ===

$59451104901430*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual[/right]


=== trans/options_language_disclaimer ===

$72959997258737* Você deve reiniciar para que as alterações de idioma tenham efeito.


=== ui/state_ui/title_screen/play ===

$66967233942803* jogar campanha


=== trans/level_ram_component_value_description ===

$53113984441582*
[right]Teste
Endereço
Ação
Saída esperada[/right]


=== trans/level_byte_less_description ===

$37336202055283* [center]Determine se a primeira entrada é menor que a segunda.[/center]


=== components/Register16 ===

$16015376037787* Registrador de 16 Bits
$71792123436163* Memória de 16 bits


=== levels/Opcodes ===

$19693461238792* Defina o incremento do contador para 4
$38976231780455* O componente vinculado {nr} deve apontar para um registrador ou componente personalizado com um registrador interno
$20916717363300* O componente vinculado {nr} deve apontar para a saída
$18189600217529* Implemente as instruções OPCODE
$13450117997204* Adicione um contador ao circuito
$77044880242883* O componente vinculado {nr} deve apontar para o contador
$13870568875751* Crie um novo esquemático e adicione um programa com saída de 4 bytes
$10303603301757*
Implemente os seguintes opcodes:
[code][color=#87a8c8]0 ADD
1 SUB
2 AND
3 OR
4 NOT
5 XOR[/color][/code]

O opcode NOT ignora o segundo argumento.
$17495651785164* Adicione 6 registradores ao mapa


=== components/Mem Unit ===

$57670626909848* 1 bit de memória
$78616473760551* Memória de 1 bit


=== rpg/maps/prison/snake ===

$41424386577594* Cobra
$44205554907271* Sibilo Sibilo Chocalho
$36655099439467* Sangue


=== trans/panel_inputlevel_input ===

$27464111307888* Entrada


=== misc/credit_box ===

$15872341864658*
Agradecimentos sinceros a:

[b]Tradutores[/b]
{translators}

[b]Testadores beta iniciais[/b]
{beta_testers}

[b]Trabalho de fontes[/b]
{font_work}

[b]Trilha sonora[/b]
 Aarón F. Bianchi

[b]Software de código aberto[/b]
{software}

[b]Recursos[/b]
{assets}





=== trans/level_flood_enter ===

$64481408588810* Aperte ENTER para mostrar a água


=== trans/panel_matrix_input1 ===

$94408716277517*
[right]Ativar Y
Cor[/right]


=== trans/options_pan_left ===

$78515694621006* Mover para esquerda


=== rpg/maps/prison/control_panel_release ===

$78007210535349* Painel de controle


=== trans/panel_hdd_size2 ===

$82587023815880* Tamanho (64 bit):


=== trans/panel_splitter8_input ===

$90934251511339* [right]Entrada[/right]


=== rpg/maps/unseen_fruit/Gulgramush JR ===

$21404721941060* Você sabia que os terráqueos comem com o rosto?


=== misc/lab_toggle ===

$16432178820878* Laboratório


=== components/Program4 ===

$27522667367787* Programa
$45650720555565* Componente de memória programável


=== trans/options_controls ===

$18297012748869* Controles


=== levels/Counter ===

$17701404772563* Adicionar 1
$17940006660359* Contar
$17263901743088*
Construa um contador que aumentará em 1 a cada tick.

Adicionalmente, deve haver uma opção para sobrescrever o contador com um valor fornecido.

Você recebe 2 entradas, um bit e um byte.

A entrada de bit deve alternar entre contar e sobrescrever com o valor do byte.
$68874699768861* Sobrescrever com {value}
$17883663978196* Sobrescrever
$19407121413983* AÇÃO
$10555159894041*
Contar é tão fundamental que até insetos fazem isso. A partir da contagem, as espécies podem evoluir para comparar e fazer aritmética. E antes que você perceba, você tem primatas construindo computadores.

Faça um dispositivo que conte incrementando uma vez por tick.


=== components/Constant32 ===

$39402227599142* Valor constante
$30896164786171* Constante de 32 Bits


=== trans/manual_text_ram ===

$10969790213397*
Este simulador possui vários tipos de RAM com diferentes compensações, similar às opções de RAM na vida real.

[b]RAM[/b]
O componente RAM pode armazenar muitos dados, mas adiciona um atraso muito alto ao circuito.

[b]RAM Rápida[/b]
A RAM rápida tem baixo atraso, mas um custo muito alto de portas por byte.

[b]RAM com Latência[/b]
A RAM normal tem atraso muito alto, porém ao invés de esperar por esse atraso a cada tick, podemos tratar a RAM como se carregar e salvar levasse múltiplos ticks. O número de ticks que salvar e carregar levará depende da duração de cada tick. Digamos por exemplo que nosso circuito tenha um atraso de 100 unidades, um carregamento levaria 10 ticks, já que temos que esperar cerca de 1000 unidades de atraso.

Uma abordagem comum para arquiteturas pipeline é usar RAM com Latência para a memória principal, mas usar uma pequena quantidade de RAM Rápida para cache. Como o acesso à memória é frequentemente adjacente ou próximo (por exemplo ao percorrer um array), buscar valores adjacentes ao carregar da RAM com Latência e armazená-los em cache na RAM Rápida pode acelerar significativamente certos tipos de programas.

A maneira mais simples de integrar a RAM com Latência é simplesmente travar toda a arquitetura enquanto espera por um salvamento ou carregamento. Uma otimização fácil disso vem de perceber que você não precisa esperar por salvamentos, exceto se quiser carregar.

[b]RAM de Carga Dupla[/b]
Às vezes é benéfico separar partes da lógica em uma unidade de processamento separada, que opera mais ou menos independentemente. Isso poderia ser para lidar com um dispositivo de exibição ou uma conexão de rede. Nesses casos, a unidade independente frequentemente precisará carregar e salvar continuamente na memória, enquanto a lógica externa só precisa carregar ocasionalmente. Use RAM de Carga Dupla para evitar ter que agendar quem tem acesso à RAM em qual momento.


=== component_panels/sprite_display_select_button ===

$18632189666863* Selecionar arquivo


=== levels/circular_dependency_check ===

$25155953943906* Correto!
$32314337981189* Verificar
$73467991035922* Errado!
$22446480186064* Crie uma dependência circular envolvendo pelo menos 2 componentes


=== trans/map_locked ===

$95146987030704* Bloqueado


=== levels/decoder ===


# Short because it will become the name of a custom component
$62618958406279* DEC
$16133643476631* O circuito que você construiu no nível "Registradores" pode copiar valores entre registradores, enquanto a "Unidade Aritmética" pode fazer diferentes operações em 2 entradas. Mas você precisa ser capaz de fazer ambos no mesmo circuito. Para isso, construa um "decodificador", que decidirá em qual modo nosso computador está, baseado nos 2 bits que ainda não usamos.
$18435544383511* Padrão CALCULAR\n[OFF] [ON] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$18198768092383* COPIAR
$18945946395447*
Para distinguir entre as [INSTRUÇÕES] de 4 tipos diferentes, os dois bits mais significativos serão usados para determinar em qual MODO estamos da seguinte forma:
[OFF] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Imediato
[OFF] [ON] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Calcular
[ON] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Copiar
[ON] [ON] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Condicional

Aqui [ANY] significa qualquer valor.

Determine o MODO em que estamos a partir da entrada, então envie [ON] para a saída correta.
$16785126425267* CALCULAR
$15440615199508* CONDICIONAL
$15105859227432* Padrão COPIAR\n[ON] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$11382827588408* Padrão CONDICIONAL\n[ON] [ON] [OFF] [OFF] [OFF] [ANY] [ANY] [ANY]
$82074370773365* INSTRUÇÃO
$12976424717611* Padrão IMEDIATO\n[OFF] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$12532951884542* IMEDIATO
$10169248860836* Decodifique a instrução


=== levels/call_ret/no ===

$90567812500955* Não
$82611295916141* Esperávamos mais de você.


=== trans/level_compute_xor_description ===

$61886892927185* XOR bit a bit em pares


=== trans/level_signed_negator_description ===

$87777776285772* [center]Inverte o sinal do número[/center]


=== trans/options_effects_volume ===

$24145565754506* Volume dos efeitos


=== trans/panel_maker64_input ===

$67636019772385*
[right]Byte 1
Byte 2
Byte 3
Byte 4
Byte 5
Byte 6
Byte 7
Byte 8[/right]


$60791074149079* Chef
$43137217122501* Precisa de ajuda?


=== main_scripts/overture_level ===

$83829200305236* Saída esperada {expected}, obtida {got}
$11338791453100* Dinâmico
$27259865408750* No próximo tick o valor do contador será {next}, deveria ser {expected}

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$85842797287714* R4
$92808834805287* Copiar ENTRADA para SAÍDA

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$81103754316448* EN
$95030012922256* Entrada deve ser ativada apenas ao ler da entrada

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$39748815905832* R2

# "cond" is for condition, this label has to be 4 letters or less as it has to fit on a component
$94982725578534* COND
$12873109232054* Saída esperada {expected}, obtida {got}
$93579176707338* Copiar ENTRADA ({input_val}) para REG {reg}

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$49076331369118* R5
$95699170830383* Imediato {nr} para REG 0
$90667501138629* Se REG 3 ≥ 0, contador = {val}

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$28690475492473* SAÍ
$15507583089532* REG {nr} deveria ter valor {value}
$19724825417529* Copiar REG {n1} para REG {n2}
$76213462280109* Se REG 3 > 0, contador = {val}
$56098077111355* Se REG 3 ≠ 0, contador = {val}
$36131297419794* Nunca sobrescrever contador (Não fazer nada)
$65651227755356* No próximo tick o valor do contador será {actual}, deveria ser {expected}
$78673238418574* Seu circuito está sem um componente contador (você deve usar o componente no menu '8 BIT')
$75122220982708* Copiar REG {n1} para SAÍDA
$47188699762650* Saída não ativada
$44533909869936* REG 1 e REG 2 são entradas para a ALU, REG 3 é para o resultado.\nParece que você está usando REG 0, 1 e 2.

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$73538301913919* R0
$51029568177086* Se REG 3 < 0, contador = {val}
$79405336618718* Imediato {nr} para REG 0
$28026304798371* Saída deve ser ativada apenas ao enviar saída
$85260864781281* Entrada não ativada

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$80997977734042* R3
$96569633331621* Carregar {value} em REG 0

# Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$37653426314061* R1
$51099912089198* Contador = {val}
$16914143080303* Copiar
$59042824277105* Imediato
$82949244692745* Calcular
$23384670264323* Se REG 3 = 0, contador = {val}
$50124579293905* Se REG 3 ≤ 0, contador = {val}


=== levels/Further Delayed Lines ===

$17366913897135* Construa um circuito que forneça como saída o mesmo que a entrada, apenas com atraso de 2 ticks.
$60989431641221*
Este nível introduz o componente Linha de Atraso. Ele recebe sua entrada e a fornece como saída 1 tick depois.

[img]dialogue/delay_buffer.png[/img]


=== levels/negative_numbers ===

$17231048881956* Para saber a diferença entre as coisas, você precisa de subtração. Para ter subtração, primeiro você precisa de números negativos.
$13872783467999* Qual é {number} em binário com sinal?
$49993940138672*
Este nível apresenta o "complemento de dois", a representação mais comum para números negativos.
	
Aqui o dígito mais alto é negado. Para bytes, isso significa que o 8º dígito muda seu valor de 128 para -128.

Você conclui este nível quando chegar ao nível 3 ou além.

(clique [color=#e63e5b][url=accessibility_mode]aqui[/url][/color] para ativar o modo de acessibilidade sem temporizador)
$97450409600317*
[b]PONTOS PRINCIPAIS[/b]

1. Para alternar entre negativo e positivo, você inverte todos os bits e adiciona 1.
2. Se o bit mais alto estiver [ON], o valor é sempre negativo.
3. O somador de bytes que você construiu também funciona com números com sinal.
4. Ainda há exatamente 1 maneira de escrever cada número.
$37471385247951* Bom trabalho, você alcançou o nível {current_level}.


=== trans/nand_Label2 ===

$60885816586685* Saída


=== levels/NAND Gate ===

$17420270098223* Neste nível o desafio é descobrir como o componente NAND funciona. [color=#dd6576]Certifique-se[/color] de entender antes de completar este nível, ou você ficará travado no próximo!
$11034378482152* Correto! Você desbloqueou a porta NAND. Com este componente você pode construir todo o resto do seu computador!
$18270083417453* Verificar
$19208664264770* [b]Instrução[/b]\nClique em qualquer um dos botões cinzas na última linha da tabela.
$17923274216766* Decidimos que você provavelmente não é uma planta.
$14777350869870* Ficamos muito impressionados com o quão bem você completou o último teste!
$17994568832660* [b]Instrução[/b]\nO componente NAND no meio altera o fluxo do circuito.\nUse a barra à esquerda para experimentar com as entradas, veja como elas afetam a saída e preencha a última linha da tabela.


=== trans/options_copy ===

$55679445263875* Copiar


=== components/Input 2 ===

$86870364449392* Entrada


=== components/Bit Compressor ===

$74338505460996* Transforma 8 bits em 1 byte
$98747779812970* Criador de 8 Bits


=== trans/options_pan_down ===

$93140495547084* Mover para baixo


=== components/Mux64 ===

$14050204031082* Alterna entre dois valores
$66892629981737* Mux de 64 Bits


=== trans/manual_hard_disk ===

$45865138134248* Disco rígido


=== components/NOR ===

$27510848535619*
[ON] quando nenhuma das entradas está [ON]
[table=5]
[cell]Entrada 1[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Entrada 2[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Saída[/cell][cell][ON][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][OFF][/cell]
[/table]
$83375115196253* NOR


=== levels/hex_racer ===

$92057009138253* Qual é {number} em binário?
$16009852370452*
Ao lidar com muitos bits, binário pode se tornar difícil de ler. Hexadecimal (base 16) representa cada combinação de 4 bits como seu próprio caractere:
[code]
0 [OFF][OFF][OFF][OFF]
1 [OFF][OFF][OFF][ON]
2 [OFF][OFF][ON][OFF]
3 [OFF][OFF][ON][ON]
4 [OFF][ON][OFF][OFF]
5 [OFF][ON][OFF][ON]
6 [OFF][ON][ON][OFF]
7 [OFF][ON][ON][ON]
8 [ON][OFF][OFF][OFF]
9 [ON][OFF][OFF][ON]
A [ON][OFF][ON][OFF]
B [ON][OFF][ON][ON]
C [ON][ON][OFF][OFF]
D [ON][ON][OFF][ON]
E [ON][ON][ON][OFF]
F [ON][ON][ON][ON]
[/code]

Como exemplo onde hexadecimal é muito mais claro, vamos comparar a representação do maior número de 16 bits:
[code]
Binário:     1111111111111111
Decimal:     65535
Hexadecimal: FFFF
[/code]

Não é fácil perceber se o binário está faltando um dígito ou se o número decimal está errado por 1, o hexadecimal por outro lado é imediatamente claro (pelo menos depois que você se acostuma com a representação).
$84691609525475* Este nível é meu segundo passatempo favorito. Converter hexadecimal para binário sob pressão de tempo.
$87016829502381* Bom trabalho, você alcançou o nível {current_level}.
$43463538043782*
Alterne os bits no painel do nível para que somem o número hexadecimal na pergunta.

Você deve vencer o nível 3 para passar.

(clique [color=#e63e5b][url=accessibility_mode]aqui[/url][/color] para ativar o modo de acessibilidade sem cronômetro)


=== trans/level_full_adder_RichTextLabel2 ===

$25766177620842*
[right][color=#e49f44]Entrada 1
Entrada 2
Entrada 3[/color]
Soma Desejada
Transporte Desejado
Soma Atual
Transporte Atual[/right]


=== rpg/maps/unseen_fruit/Sign ===

$96190557871470* Placa
$11494676474259*
Está escrito: Não fique aí parado lendo placas, robô!
Vá verificar a fruta


=== components/Ror8 ===

$10802217509530* Rotaciona os bits de uma entrada para a direita
$70999134800536* Rotação de 8 bits para a direita


=== trans/options_general_tps ===

$53724631742096* Mostrar ticks por segundo


=== trans/map_arithmetic ===

$51337598329530* ARITMÉTICA


=== trans/rotate ===

$88236351843942* Rotacionar


=== components/NAND ===

$71130919681688* NAND
$12903183841172*
[ON] a menos que ambas as entradas estejam [ON]
[table=5]
[cell]Entrada 1[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Entrada 2[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Saída[/cell][cell][ON][/cell][cell][ON][/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]


=== levels/Dancing Machine ===

$14975070588197*
Todos nós gostamos do jeito que o Robô se move na pista de dança. É por isso que queremos que ele lidere nosso grupo de dança.

O único problema é fazê-lo criar sequências de dança originais. Como criar criatividade a partir de lógica determinística, você pergunta?

A resposta: geradores de números pseudoaleatórios.
$15955150920362*
Neste nível você recebe apenas uma entrada, que chamamos de semente inicial. A semente passa pelas seguintes etapas para produzir um número pseudoaleatório.

No algoritmo abaixo, "shl 1" significa deslocar à esquerda uma vez, "shl 2" significa deslocar à esquerda duas vezes e "shr 1" significa deslocar à direita uma vez.

[b]RNG xorshift de 8 bits:[/b][code][color=#87a8c8]
temp1     = seed  xor (seed  shr 1)
temp2     = temp1 xor (temp1 shl 1)
next_seed = temp2 xor (temp2 shr 2)
[/color][/code]
Em seguida, forneça como saída next_seed mod 4, para mover o robô. Por fim, use next_seed (antes do mod 4) como semente para obter o próximo número na sequência de dança e repita.

(Observe que a semente inicial nunca será 0)


=== trans/panel_fileloader_enable ===

$80528055112236* [center]Ativar[/center]


=== trans/level_dance_description ===

$29803992718733* Gerar movimentos de dança


=== misc/program_edit_signals ===

$98772447663910* Conectar componentes


=== main_scripts/levels ===

$15232844525838*
Crie o circuito que corresponde à tabela.
	
[tip]Clique duas vezes em um componente para movê-lo junto com os fios conectados.[/tip]
$64510812504271*
Alguns dos componentes usados não deveriam estar disponíveis neste nível!
A solução não é pontuada.

# Level type for the level complete menu
$58769207148712* Componente

# Level type for the level complete menu
$90134890578411* Diversos
$68327708695625*  [b]Entrada Manual[/b]\n\n Entrada: [color=#68d277]{page}[/color]

# Level type for the level complete menu
$69219742310717* Arquitetura


=== trans/level_decodre_RichTextLabel2 ===

$40723962298647*
[right][color=#e49f44]Entrada 1
Entrada 2
Entrada 3[/color]
Bit desejado
Bit atual[/right]


=== trans/manual_bytes ===

$46223559629673* Bytes


=== component_panels/Counter ===

$42544828625264* Contador não faz nada com incremento 0
$57936010210151* Incrementar em: {amount}


=== trans/panel_ram8_output ===

$90649838965927* Saída


=== trans/level_complete_ide ===

$56719825235196*
[b]IDE DE CÓDIGO[/b]
[color=#cccccc][i]Nomeie códigos e edite-os em um editor conveniente[/i][/color]


=== trans/panel_cond_input_2 ===

$82398835019064* Bit 2:


=== trans/and_gate_3_RichTextLabel2 ===

$52008707927408*
[right][color=#e49f44]Entrada 1
Entrada 2
Entrada 3[/color]
Saída desejada
Saída atual[/right]


=== trans/panel_nand ===

$51470292662088*
[right]Entrada 1
Entrada 2
Saída[/right]


=== rpg/maps/overworld/captain_grog ===

$54304087865803* Escudos ativados, salto para o hiperespaço!
$28819210888759* Capitão Grog


=== rpg/maps/overworld/hat_man ===

$66365217340789* Homem do chapéu


=== trans/options_level ===

$64744152268407* Nível


=== trans/panel_mul_input ===

$52124868557994*
[right]Entrada 1
Entrada 2[/right]


=== components/LessU32 ===

$72614358420262* Menor que (sem sinal)
$55380524073095* Verifica se uma entrada é menor que a outra


=== components/Output64z ===

$35798118634001* Saída Comutada de 64 Bits
$42506906257154* Só fornece saída se o pino de comutação estiver [LIGADO]


=== ui/toggles/race_condition ===

$75558678297830* Dependência circular


=== trans/assembly_editor_header ===

$14116831487331* Editor de Assembly


=== trans/options_paste ===

$52159578521318* Colar


=== trans/hub_stats ===

$30942143953871*
Usuário
#Data
#Personalizados


=== trans/manual_text_terminology ===

$99266452352883*
[b]Instrução[/b]
Um byte ou alguns bytes que juntos fazem o computador executar uma ação específica.

[b]Opcode[/b]
A parte da instrução que determina qual operação (como ADD ou AND) deve ser executada.

[b]Endereço de memória[/b]
Um número usado como nome para locais de memória (geralmente para registradores). Estes são usados para especificar de onde uma instrução deve carregar dados ou onde salvar dados.

[b]Salto[/b]
Alterar o valor do contador de programa, mudando qual instrução é carregada em seguida.


=== trans/manual_text_truth ===

$16559670174521*
As tabelas de entrada e saída que são usadas em todo o jogo são comumente conhecidas como tabelas verdade.








"Entrada" e "Saída" serão frequentemente representadas com nomes de variáveis, como na álgebra. E ao invés de usar cores, você frequentemente verá os valores representados como 0 / 1 ou Falso / Verdadeiro.


=== trans/level_double_buffer_RichTextLabel3 ===

$27208335953837*
[right]Entrada
Saída desejada
Saída atual[/right]


=== levels/Conditionals ===

$10794262854382*
Adicione instruções condicionais ao seu circuito. Para as instruções condicionais, os 2 argumentos são comparados e se a condição for verdadeira, o contador é definido para um endereço de salto.
	
As instruções anteriores tinham os 4 bytes representando:
[code][color=#87a8c8]OPCODE, ARGUMENTO_1, ARGUMENTO_2, RESULTADO[/color][/code]

Para instruções condicionais os bytes representam:
[code][color=#87a8c8]OPCODE, ARGUMENTO_1, ARGUMENTO_2, ENDEREÇO_SALTO[/color][/code]

Além dos opcodes anteriores, adicione:
[code][color=#87a8c8]32 IF_EQUAL
33 IF_NOT_EQUAL
34 IF_LESS
35 IF_LESS_OR_EQUAL
36 IF_GREATER
37 IF_GREATER_OR_EQUAL[/color][/code]

Use comparações sem sinal para menor/maior.

Cada opcode faz o que seu nome sugere. Por exemplo, o seguinte salta para o byte 16 se REG0 for menor que REG1: 
[code][color=#87a8c8]IF_LESS REG0 REG1 16[/color][/code]

$18542005958715* Defina o incremento do contador para 4
$17133561664335* Parabéns, você terminou o computador [color=#e49f44]LEG[/color]!
$14973719570693* Adicione um contador ao circuito
$12920514303805* Adicione 6 registradores ao mapa
$14309211963063* Crie um novo esquemático e adicione um programa com saída de 4 bytes
$16826220977157*
 [color=#b72d41][b]DICA:[/b][/color] 
COPY é apenas ADD com o segundo argumento sendo 0
$14690660047411* Implemente os opcodes condicionais
$30132649789584* O componente vinculado {number} deve apontar para a saída
$18994998239232* Vou mostrar algumas melhorias que você pode fazer, no caminho para implementar chamadas de função. Mas daqui em diante os detalhes dependem de você, não vou dizer quais opcodes usar e assim por diante.
$12034111753799* O componente vinculado {number} deve apontar para o contador
$36561706158040* O componente vinculado {nr} deve apontar para um registrador ou componente personalizado com um registrador dentro


=== misc/multi_select ===

$85147529532131* Seleção múltipla (Atalho: SHIFT e arrastar)


=== trans/panel_segment_info ===

$64695289448271* Os 8 bits do valor ativam cada um 1 das 8 áreas do display.


=== trans/manual_text_universal_gates ===

$37735744928195*
Acontece que você pode construir toda a lógica de um computador usando apenas portas NAND ou NOR. Os computadores de orientação da Apollo foram construídos inteiramente com portas NOR. Projetados nos anos sessenta, eles tinham apenas 4KB de RAM e 32KB de espaço em disco, mas mesmo assim guiaram astronautas até a lua.

Computadores modernos não são construídos inteiramente com apenas um dos tipos de portas universais, mas quando aplicável, portas NAND são preferidas em relação às NOR, porque têm menos atraso e ocupam menos área.


=== components/Splitter16 ===

$92674917729864* Divisor de 16 bits
$28271182652741* Divide 16 bits em 2 bytes


=== rpg/maps/overworld/slime ===

$15692058001120* Gosma
$69726620971060* Peguei toda a gosma que preciso
$87592944464187* Peguei gosma, faltam {nr}
$44317276399194* Gosma de slime


=== trans/inputlevel_enable ===

$28654406516589* [center]Desativar / Ativar[/center]


=== trans/panel_keyboard_event ===

$67549215280299* Evento aguardando


=== trans/levels_byte_or_description ===

$68379799788575* [center]Aplica OR bit a bit em pares[/center]


=== levels/counting_signals ===

$10724914203078*
O componente de saída deste nível é um contador binário onde os primeiros 3 pinos correspondem a 1, 2 e 4.
Use o contador binário para exibir o número de sinais.

Confira [color=#e63e5b][url=counting_signals]esta dica[/url][/color] se ficar travado

[i][tip]A solução para este nível não é muito elegante e requer mais componentes.[/tip][/i]

$10881918807029*
[color=#b72d41][b]DICA:[/b][/color] 
Não há vergonha em usar papel e caneta


=== misc/button_next ===

$80746616574054* Próximo (Atalho: F5)


=== ui/toggles/level_map ===

$71951682957395* Mapa de níveis


=== components/DivMod64 ===

$80284847781948* Dividir
$71663353206665* Dividir e calcular o resto de 2 números


=== levels/saving_bytes ===

$10633476398156*
Crie um circuito que possa [SALVAR] ou [CARREGAR] um byte.

Quando o primeiro bit de entrada estiver [LIGADO], [CARREGUE] a memória e envie para a saída.
Quando o segundo bit de entrada estiver [LIGADO], [SALVE] o byte de entrada.

A saída tem um pino de ativação, ative-o apenas ao [CARREGAR].

$15510981129613* CARREGAR
$13502950630653*
[color=#ff9800]Nenhum
0
0[/color]
$19109563882664* NÃO CARREGAR
$16372198430230* SALVAR
$11467279617581* SALVAR
$15498440508450* Não fazer nada
$10080722944246* NÃO SALVAR
$18873598212433* CARREGAR
$15582618410991* CARREGAR e SALVAR


=== levels/byte_constant ===

$12641789008694* Crie um circuito que sempre forneça como saída o número 164.


=== trans/panel_ram_fast_input ===

$80778301064570*
[right]Carregar
Salvar
Endereço
Salvar valor
Salvar valor
Salvar valor
Salvar valor[/right]


=== levels/odd_ticks ===

$18510295620397* Saída [OFF] nos ticks pares e [ON] nos ticks ímpares.
$16987046679863* Em um nível anterior você aprendeu que não permitimos dependências circulares. Agora você deve aprender a única exceção.
$16037516781370*
Pinos quadrados no jogo nunca afetam a saída no mesmo tick. Portanto, eles nunca causam dependências circulares.
	
	[img]dialogue/delay_buffer.png[/img]
$17588119878416*
A linha de atraso pode depender de sua própria entrada. Isso porque sua entrada não influencia o resto do circuito até o próximo tick.
	
[img]dialogue/delay_buffer.png[/img]


=== components/Adder Simple ===

$33973952772642* Somar
$98429814030509* Soma duas entradas


=== trans/panel_ram8_input ===

$54796685972031*
[right]Carregar
Salvar
Endereço
Salvar valor[/right]


=== trans/level_complete_delay ===

$73470840319057*
[b]Atraso[/b]
[color=#cccccc][i]Agora você pode visualizar o atraso de fios e componentes.[/i][/color]


=== trans/panel_ram_fast_output ===

$44175594625487*
Saída 1
Saída 2
Saída 3
Saída 4


=== trans/level_saving_gracefully_RichTextLabel3 ===

$74117520663650*
[right][color=#e49f44]Salvar
Valor[/color]
Saída desejada
Saída atual[/right]


=== misc/select_color ===

$97461374731210* Cor do fio


=== trans/manual_text_circular_dependency ===

$29050562435902*
Uma dependência circular é quando a entrada de um componente muda com base em sua própria saída.

[center][img]res://dialogue/circular_dependency.png[/img][/center]

Este simulador não permite dependências circulares e, em vez disso, aciona um erro.

A exceção a isso são os pinos quadrados que não influenciam a saída no mesmo tick. Portanto, eles não podem causar dependências circulares.

[center][img]res://dialogue/delay_buffer.png[/img][/center]


=== trans/panel_splitter16_output ===

$19314358335345*
Saída 1
Saída 2


=== trans/options_explicit_clock ===

$90384542658266* Relógio explícito


=== trans/level_alu2_text ===

$58359423026017*
[right]Código
[color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual
[/right]


=== rpg/maps/overworld/door3 ===

$62992379521216* Porta
$12075276554344* A maçaneta está quebrada


=== levels/push_pop ===

$78804623186243* SAÍDA
$49526452710191* NÃO REMOVER
$58050047963238* VALOR
$30926395960020* EMPILHAR
$19245209470436* Criar uma pilha

# Short because it will become the name of a custom component
$84236889840605* PILHA
$12227209887733*
A cada tick, as entradas sinalizarão EMPILHAR ou REMOVER. Se for EMPILHAR, armazene o valor no topo da pilha. Quando for REMOVER, retire esse valor da pilha e forneça como saída.
	
A saída tem um pino de ativação, ative-o apenas em REMOVER.

$85171087236638* ATIVAR
$15662660252584* Não fazer nada
$23726790986805* REMOVER
$62469306234943* NÃO EMPILHAR
$46948857059388* REMOVER valor {value} da pilha
$18761197388580* Para cortar gastos, foi decidido mudar o sistema de filas nos órgãos públicos para que menos pessoas compareçam. Em vez de primeiro a chegar, primeiro a ser atendido, estamos implementando uma política de último a chegar, primeiro a ser atendido. Pense nisso como uma [color=#e49f44]pilha[/color] de senhas numeradas onde os cidadãos colocam uma senha no topo (chamado [color=#e49f44]EMPILHAR[/color]), ou os burocratas retiram uma do topo da pilha (chamado [color=#e49f44]REMOVER[/color]). Queremos que você implemente esse novo sistema.
$65188797398656* EMPILHAR {value} na pilha


=== levels/The Product of Nibbles ===

$14622683750375* Bit 2
$14957949958941* O que você fez aqui foi multiplicar dois números de 4 bits. Pedimos ao estagiário para expandir isso para bytes.
$17331397914567* Bit 1
$19136817138607* [center]Multiplique os números de 4 bits[/center]
$13232094477834* Bit 3
$13549246864135* Bit 0
$15857218442751* Bit 1
$14533861483435* Multiplicar dois números de 4 bits resulta em um número de 8 bits. Construa um circuito que faça isso.
$10430040077737* Bit 3
$10274387271390* Bit 0
$16301538038805* Bit 2
$83694551809785* Multiplique {num1} e {num2}


=== trans/panel_matrix_column_major ===

$90704227545058* Pixels por coluna


=== trans/panel_counter16_input ===

$87154643308632*
[right]Incrementar / Sobrescrever
Valor de sobrescrita[/right]


=== trans/panel_not ===

$33240384048149*
[right]Entrada
Saída[/right]


=== rpg/maps/spacial_invasion/door ===

$59863326177819* A porta está trancada
$13853333722323* Porta


=== ui/toggles/level_log2 ===

$91515053618360* Manual


=== main_scripts/functions ===

$11467644007149* Contador {nr}
$35675567872962* Contador não faz nada com um incremento de 0
$73560327420927* Este salvamento é de uma versão obsoleta deste nível.\nCrie e carregue um novo esquemático no menu de esquemáticos.
$41936481068702* Contador
$99285446909923* Para resolver este nível você precisa usar o componente 'Saída do nível'
$72465734060414* Curto-circuito (saídas: {values})
$10533010562232* PONTUAÇÃO DE ATRASO: {delay}
$10098517717617* Teste: {nr} / {total}
$83854326413007* O componente personalizado "{name}" mudou de tamanho e foi removido do esquemático porque não cabe mais.
$29225283986051* Para resolver este nível você precisa usar o componente 'Entrada do nível'
$95056157627313* Para resolver este nível você precisa usar o componente 'Entrada do nível'
$39587966698723* Curto-circuito dentro de {custom_component}
$87591753278764* Reg {nr}

# Right hand side menu
$29169064199243* Saída {nr}
$12249248261034* Para resolver este nível você precisa usar o componente 'Saída do nível'
$13327741293223* Entrada {nr}
$32508339206292* PONTUAÇÃO DE PORTAS: {gate}
$42012207828907* Registrador


=== misc/view_solution_button ===

$59351520832720* Sim


=== levels/or_gate_3 ===

$15448906128695* Crie uma porta OR com 3 entradas.


=== trans/binary_racer_count_down2 ===

$23959994711260* Pronto para correr?


=== trans/level_capitalize_input ===

$23002150617591* Entrada


=== trans/panel_mul_output ===

$55253255963402*
Metade inferior
Metade superior


=== trans/map_complete ===

$81337533438394* Concluído


=== trans/delay_score ===

$29032982097458* PONTUAÇÃO DE ATRASO:


=== trans/panels_config_delay_delay ===

$52499013005170* [right]Atraso[/right]


=== rpg/maps/unseen_fruit/Lolbert ===

$77789556089413*
As frutas da Terra são muito melhores
do que o ensopado que normalmente servem


=== levels/Storage cracker ===

$11910674853271*
A porta de acesso de segurança da sala de armazenamento está quebrada e continua trancando nosso velho zelador lá dentro.

A porta fica mudando a senha, precisamos de um programa que possa recuperar a senha a qualquer momento.
$17462419719036*
A maneira mais fácil de encontrar a senha seria tentar todas as combinações até encontrar a correta.
Embora o mecanismo quebrado faça um bipe estranho quando seu palpite é muito alto, você pode usar isso a seu favor.
$11183892008673* Você vence este nível ao fornecer como saída a senha correta, nenhuma saída falhará o nível. Adicionalmente, a entrada será 1 após um palpite que foi muito alto e 0 caso contrário.


=== trans/level_alu1_text ===

$53254733455389*
[right]Código
[color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual
[/right]


=== components/Output16 ===

$48008022162230* Saída de 16 Bits


=== rpg/maps/overworld/book_shelf ===

$29366577532389* Estante de livros
$26595142082551* Uma bela estante de livros


=== components/Input 3 ===

$70689623552857* Entrada


=== trans/options_cut ===

$88238310953306* Recortar


=== trans/panel_network_next_event ===

$80836714383432* Próximo [color=#39aa49]Tipo de evento[/color]


=== trans/manual_text_top_truth ===

$83283949590490* Porta E


=== rpg/maps/overworld/gruliette ===

$83120363112787* Oi, gato
$61022705156373*
Ah não, já terminei
com essa missão
$84856635901648* AHHHhhhh meu coração derrete!
$16008092188500* Gruliette
$58406047748371*
Só se ele puder me trazer
uma flor rosa
$18919563572338*
Você quer sair
em um encontro com Dumio?
$68101445990611* Aqui está a flor rosa
$68725679456014*
*smack* leve este beijo
para Dumio por mim
$73977053028689* Oi, gato
$50949692384224* Meus ouvidos doem
$35813418867082* Isso é aleatório


=== trans/panel_fileloader_description ===

$72892007399429*
A ROM de arquivo fornece como saída o conteúdo de um arquivo 8 bytes por vez.

O endereço de 64 bits mais alto (0xFFFFFFFFFFFFFFFF) é especial e fornece como saída o tamanho do arquivo em bytes.


=== trans/and_gate_RichTextLabel2 ===

$98472849629373*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual[/right]


=== components/Clock ===

$29674337035619* Colocar o relógio dividirá os ticks em 2 fases. O relógio fica [DESLIGADO] na fase inicial e [LIGADO] na fase final. Todos os componentes de memória carregam na fase inicial e salvam na fase final.
$73207565196164* Relógio


=== components/1_decoder ===

$26685462633615* Alterna entre duas saídas
$98250587600120* Decodificador de 1 bit


=== trans/panel_input_left ===

$91063734228931* Esquerda


=== components/XOR ===

$86856280609387*
[ON] quando as entradas são diferentes
[table=5]
[cell]Entrada 1[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Entrada 2[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Saída[/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]
$54832952840086* XOR


=== trans/options_undo ===

$58334563411624* Desfazer


=== misc/factory ===

$53123649343022* Fábrica de Componentes


=== trans/tps_label ===


# Stands for Ticks Per Second (an option in the menu)
$25685496576554* TPS:


=== trans/manual_ram ===

$61854681801183* Ram


=== trans/levels_computing_input ===

$23173159754705*
Código
Entrada


=== trans/manual_header ===

$10757271456963* Entradas do manual


=== components/Ror16 ===

$13970397213910* Rotaciona os bits de uma entrada para a direita
$90115282457191* Rotação de 16 bits para a direita


=== rpg/maps/overworld/thing ===

$97983135944004* Coisa
$65301573705048* Preciso olhar para tudo?


=== misc/opcode_name ===

$15090156481094* Nome


=== trans/map_cpu_architecture ===

$95559333192525* ARQUITETURA DE CPU


=== trans/panels_sound_description ===

$65379881141228*
[b][color=#e49f44]Tipo de comando[/color][/b]
[code]0[/code] Sem solicitação
[code]1[/code] [color=#e49f44]Tocar[/color]
[code]2[/code] [color=#e49f44]Reiniciar e tocar[/color]
[code]3[/code] [color=#e49f44]Parar[/color]


=== misc/level_gate_unlocks_unknown ===


# This is a tooltip for levels on the level map, before something has been unlocked.
$76731326010721* Desbloqueia algo desconhecido


=== trans/levels_negative_header ===

$82195103144851* [center]Requisitos[/center]


=== components/LevelOutput1 ===

$12242923444593* Saída


=== levels/byte_adder ===

$16888130664370*
Se o resultado não couber em 8 bits, ligue a saída de transporte [ON] (você pode pensar nela como o 9º bit)
	
Por fim, há também uma entrada de transporte. Isso é útil para encadear somadores de bytes para somar números maiores. Você pode pensar nesse transporte como adicionar 0 [OFF] ou 1 [ON].

Use [color=#e63e5b][url=byte_adder]esta dica[/url][/color] se ficar travado.
$18732877690173* Some os dois bytes de entrada. Cada bit na saída deve ser o resultado da adição dos bits correspondentes das entradas, e potencialmente um transporte.


=== components/Shr32 ===

$87104108203785* Desloca os bits de uma entrada para a direita
$88430124157796* Deslocamento de 32 bits para a direita


=== components/Mux32 ===

$16638728645850* Alterna entre dois valores
$21257226547838* Mux de 32 Bits


=== trans/levels_bytw_or_text ===

$21877344150481*
[right]
[color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual
[/right]


=== components/DelayLine64 ===

$80000130396288* Linha de Atraso de 64 Bits
$35525647389906* Fornece como saída a entrada deste tick, no próximo tick


=== rpg/maps/prison/shelf ===

$31961489023013* Estante de livros


=== trans/manual_Cyclic recipes ===

$45682345144408* Receitas circulares


=== trans/level_flood_predictor_description ===

$24034386495895* Encontre o melhor local para o Mergulho do Pirata


=== main_scripts/dialogue ===

$95287273202819* SALVAR

# hint for odd number
$68750974209145* Você pode descobrir se 2 entradas têm um número ímpar de [ON] com apenas 1 componente...

# hint for the bus
$50799425816171* Use chaves para colocar as entradas no mesmo fio.

# Hint for byte adder
$37093555217568* Você só precisa de 8 somadores completos.

# Hint for the maze
$36837749971886*
Sempre seguir pelo lado esquerdo (ou direito) do labirinto garantirá que você eventualmente alcance a saída.
	
O pseudocódigo para tal algoritmo seria assim:
 Dar um passo à frente
 Virar à esquerda
 Virar à direita enquanto houver uma parede à frente
 Pressionar usar após cada curva (caso a saída esteja à frente)
 Repetir

# hint for counting signals
$21044442262778* O circuito para o bit de 1 é o mesmo que você fez no nível "Número Ímpar de Sinais". O circuito para o bit de 2 é o que você fez em "Problema Duplo", exceto quando todos os 4 estão ligados.

# hint for saving gracefully
$25321701584378*
Neste nível você precisa usar 1 Linha de Atraso. Faça uma tabela verdade para o que deve entrar na Linha de Atraso. Considere a entrada da Linha de Atraso como a saída para sua tabela. 

As entradas são as 2 entradas do nível E a saída da Linha de Atraso, já que a saída tem um papel em sua entrada. No total você tem 3 "entradas" para esta tabela, o que dá 8 combinações. Assim que você tiver os requisitos do nível como uma tabela, deve ser muito mais fácil resolver.
$43114846393781* CARREGAR
$65118645692603* instrução
$53308028631558* instruções

# Hint for masking time
$46866534894828*
Em binário, calcular o módulo 4 de um número é o mesmo que usar apenas os dois bits inferiores. Isso porque os bits superiores representam 4, 8, 16 etc, e todos dividem 4 sem resto.
Isso é verdade em geral para módulo de uma potência de 2, o bit mais baixo de um número representa aquele número módulo 2 (par ou ímpar), os 3 bits mais baixos módulo 8 e assim por diante.

Da mesma forma, em decimal 4321 módulo 100 também é simples (a resposta é 21, os dígitos superiores são desconsiderados), isso porque 100 é uma potência de 10.

Agora você só precisa descobrir como obter os últimos 2 dígitos de um número.
$52150443679969* Continuar

# hint for less
$56438995128380*
Primeiro determine quais bits são diferentes entre os 2 bytes. Isso pode ser feito usando um XOR de byte (lembre-se que XOR fica [ON] quando as entradas não são iguais). Sabemos que o número que tem o bit diferente mais alto [ON] é o número maior. Mas devemos considerar apenas o bit diferente mais alto, então para cada bit, use uma cadeia de portas OR para verificar se algum superior está [ON].
		
Por fim, o último bit é considerado separadamente para números com sinal, aqui ele tem o efeito oposto (se apenas um número o tem [ON], esse número é garantidamente menor)
$89787506720574* Fechar
$66207112287034* DICA


=== trans/options_ui_scale ===

$78210579950439* Escala da interface


=== components/Nand32 ===

$24565725389553* NAND bit a bit de dois valores
$71611588991682* NAND de 32 Bits


=== trans/odd_number_error ===

$61530231182650* Muitos componentes utilizados


=== components/ByteAnd ===

$61791872137683* E bit a bit entre dois valores
$21541105796357* E de 8 Bits


=== rpg/maps/prison/prison_guard ===

$12720535616690*
Você não deveria
estar aqui, robô!
$48106038104468* Sangue
$54139682820568* Guarda da prisão


=== components/Counter ===

$51446864816252* Incrementa a cada tick, a menos que seja sobrescrito
$67910883947749* Contador de 8 Bits


=== trans/ide_assembly_codes ===

$62016169253008*
[center]Códigos
Assembly[/center]


=== trans/options_general_title ===

$21908594290225* Geral


=== schematics_hub/accept_license ===

$72317516399185* Concordar em usar a licença [color=#dd6576][url=cc0]CC0[/url][/color]


=== trans/panel_screen_description ===

$31014036880257* A tela mostra os visuais dos níveis na campanha principal.


=== rpg/maps/overworld/fighter_plane ===

$12257592826946* Eu quero um desses!
$37870979642704* Avião de caça


=== components/Keyboard ===

$40965596602414* Teclado
$76766452660421* Registra as teclas pressionadas do seu teclado físico


=== misc/level_close ===

$79455494572697* Continuar


=== trans/level_byte_xor_text ===

$15756501406553*
[right]
[color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual
[/right]


=== trans/manual_edit_instructions ===

$86365051641280* Editar instruções


=== trans/dual_ram_output ===

$23716875158240*
Saída 1
Saída 2


=== trans/panel_xnor ===

$84353654486355*
[right]Entrada 1
Entrada 2
Saída[/right]


=== levels/unseen_fruit ===

$13023474026617*
A coisa mais notável em seu planeta é a fruta. Ela é muito saborosa.

Por isso estamos fazendo um evento de degustação de frutas no refeitório.
$14259900563789* Escaneie a esteira transportadora para ver as frutas chegando em intervalos regulares. Assim que você vir o mesmo tipo de fruta duas vezes, vire e pressione o painel de controle.
$17070232883226* Mas queremos ter certeza de que não receberemos a mesma fruta duas vezes, pois isso seria obviamente constrangedor.


=== component_panels/NoteSound ===

$77965930443088* Personalizado
$13027096115070* Padrão
$22175469402467* Nenhum


=== levels/conditions ===

$12951779797594*
Este nível tem uma entrada de valor e 3 entradas de bits de condição.

Os 3 bits selecionam a condição conforme mostrado abaixo. Verifique o valor contra a condição selecionada e forneça como saída [ON] se for satisfeita e [OFF] caso contrário.

Código de bits:        Ligar [ON] quando:[code]
[OFF] [OFF] [OFF]    Nunca
[OFF] [OFF] [ON]    Se valor = 0
[OFF] [ON] [OFF]    Se valor < 0
[OFF] [ON] [ON]    Se valor ≤ 0
[ON] [OFF] [OFF]    Sempre
[ON] [OFF] [ON]    Se valor ≠ 0
[ON] [ON] [OFF]    Se valor ≥ 0
[ON] [ON] [ON]    Se valor > 0[/code]
$16407231803964* Se VALOR < 0 saída [img]dialogue/on.png[/img]

# Short because it will become the name of a custom component
$40613359684193* COND
$16742265812068* Independentemente do VALOR saída [img]dialogue/on.png[/img]
$17616699231679* Se VALOR > 0 saída [img]dialogue/on.png[/img]
$16632557438774* Se VALOR ≠ 0 saída [img]dialogue/on.png[/img]
$18234235689107* Se VALOR ≥ 0 saída [img]dialogue/on.png[/img]
$12429396872036* Independentemente do VALOR saída [img]dialogue/off.png[/img]
$19014698800906* Se VALOR = 0 saída [img]dialogue/on.png[/img]
$13680487623452* Se VALOR ≤ 0 saída [img]dialogue/on.png[/img]
$12706881725738* Seu circuito foi salvo na fábrica de componentes.


=== trans/panel_index_bit_input ===

$47911988603136* [right]Entrada[/right]


=== trans/manual_instructions ===

$90323246286028* Instruções


=== levels/and_gate ===

$15231724707514* Neste momento, o elefante está dominando todos os outros sujeitos de teste da Terra. Ajustando para o tamanho do cérebro, você também está indo bem.


=== trans/panel_neg_description ===

$64810753197096* [center]Nega um número[/center]


=== trans/level_ram_component_RichTextLabel2 ===

$92123299522120* [center]Estados esperados[/center]


=== trans/options_working ===


# Upload em andamento para sincronização de pontuação
$18749833316380* Trabalhando


=== trans/map_working_computer ===

$38843517090942* COMPUTADOR FUNCIONAL


=== trans/panel_decoder1_output ===

$29665974488253*
Saída 1
Saída 2


=== trans/level_RichTextLabel2 ===

$12683441099336*
[right]Entrada 1
Entrada 2
Entrada 3
Entrada 4[color=#e49f44]
Saída desejada
Saída atual[/color][/right]


=== trans/manual_program ===

$91120798735036* Programa


=== components/Register64 ===

$86007777261800* Registrador de 64 Bits
$99461037008796* Memória de 64 bits


=== rpg/maps/overworld/derpoo ===

$86147085986248* HISS
$46228887292914* GRRR
$95162531064211* HISS


=== trans/options_resubmit ===


# Seen after having uploaded a schematic to the hub and then changing the schematic
$13328644005279* Reenviar


=== components/ConfigDelay ===

$31412778600732* Atraso configurável
$84124565448643* Adiciona uma quantidade configurável de atraso. Útil para depuração de atrasos ou controle da latência da RAM de latência.


=== trans/level_bit_adder_RichTextLabel2 ===

$79624864981341*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Soma Desejada
Transporte Desejado
Soma Atual
Transporte Atual[/right]


=== components/Output8zLevel ===

$49513138880387* Saída


=== trans/panel_nor_description ===

$95856050655799* [center]Aplica NOR bit a bit em duas entradas[/center]


=== levels/RAM ===

$17967666262990* Neste teste, primeiro copie da entrada 32 vezes e armazene esses valores. Depois de ter carregado os 32 valores, forneça-os como saída na mesma ordem em que foram recebidos. Fornecer saída antes de ter lido todas as entradas fará você falhar no nível.
$13520918982355* Adicione um bloco de RAM, para que o computador possa endereçar 256 bytes adicionais de memória. Você precisa de uma forma de decidir qual dos 256 bytes dentro da RAM estamos endereçando. Selecione um registrador e conecte-o, para que seu valor sempre selecione o endereço da RAM. Quando você quiser carregar ou salvar na RAM posteriormente, terá que primeiro copiar o endereço da RAM para este registrador.


=== levels/byte_less_i ===

$16755383054285* [center]Determine se a primeira entrada é menor que a segunda.[/center]
$19006843777401* Crie um circuito que forneça como saída [ON] quando a primeira entrada for menor que a segunda. Interprete os bytes como sendo [color=#dd6576]COM SINAL[/color].
$46083799633716* {input_1} é menor que {input_2}?


=== trans/panel_register16_outputs ===

$91613202877683* Saída


=== trans/panel_halt_label ===

$81678588906692* Mensagem de parada


=== trans/level_circumference_description ===

$20154743351442* [center]Adicione condições aos códigos de cálculo[/center]


=== dialogue/schematic_hub/submit_comment ===

$56450764824675* Enviar


=== components/Neg16 ===

$17253409670931* Negar
$57512333327652* Nega a entrada


=== components/Input 1 ===

$54126599191071* Entrada de 1 Bit


=== trans/panel_switch_output ===

$86922225714685* Saída


=== misc/instr_delete ===

$91861509153454* Excluir


=== trans/level_multiply_description ===

$28761562806647* [center]Faça um E bit a bit entre cada par de bits[/center]


=== trans/level_bit_inverter_RichTextLabel2 ===

$67127889187842*
[right][color=#e49f44]Valor
Inverter[/color]
Saída desejada
Saída atual[/right]


=== components/64Ram ===

$63410290483563* Memória de baixo custo de portas mas lenta
$78790416494254* RAM


=== trans/rpg_complete_text5 ===

$15921686607849* [center]A fazenda de slimes[/center]


=== trans/panel_network_outputs ===

$68275268516971*
ID de Conexão
Dados / Porta / Código de erro
Comprimento dos dados


=== components/Nand16 ===

$63870790225686* NAND bit a bit entre dois valores
$56507506086622* NAND de 16 Bits


=== misc/specification_dialogue ===

$93899425142858* Copiar de {from} para {to}
$81322935207536* ENTRADA
$92046368194170* Condição
$39935096343723* Nunca
$52961346176405* {condition} copiar [color=#dd6576]REG 0[/color] para contador

# Overture instruction UI
$56175681834727* Quando [color=#e49f44]resultado {condition}[/color]
$31185395052385* SAÍDA
$34974836617918* {register_1} e {register_2}
$10141348037745* Imediato: {nr}
$98983752580592* Copiar
$25145891843959* Sempre
$53665446068319* NÃO USADO
$26521666422399* Calcular
$54909668901048* Imediato


=== components/Decoder2 ===

$25937877347447* Alterna entre quatro saídas
$21727998752868* Decodificador de 2 bits


=== trans/level_negative_numbers_test_5 ===

$68419648206312* [center]Representação[/center]


=== trans/panel_input_right ===

$95766090310621* Direita


=== ui/export_select_path ===

$50432926756438* Alterar


=== components/Output1z ===

$82456670459300* Saída Comutada de 1 Bit
$31478630391268* Só fornece saída se o pino de comutação estiver [LIGADO]


=== trans/panel_xor ===

$89363100135433*
[right]Entrada 1
Entrada 2
Saída[/right]


=== trans/manual_text_assembly ===

$54465324391961*
Você pode usar uma mistura de códigos assembly e números para definir os bytes. Códigos assembly são apenas sinônimos para um padrão de bits. Por exemplo, em vez de digitar 196 para "add", este código pode ser nomeado "add" diretamente, simplificando a leitura e escrita de código.

Comentários podem ser adicionados usando "#".
[img]dialogue/comment.png[/img]

Adicionalmente, a palavra-chave [color=#c54d5e]CONST[/color] pode ser usada para nomear um valor dentro de um programa específico.
[img]dialogue/const.png[/img]

[color=#c54d5e]LABEL[/color] atribui um nome ao deslocamento de byte da linha em que foi inserido. Isso é especialmente útil para nomear destinos de salto.
[img]dialogue/label.png[/img]

Você pode somar, subtrair, multiplicar, dividir inteiros, módulo, OR, AND ou XOR valores usando +, -, *, /, %, |, & ou ^ respectivamente.

Pontos de interrupção podem ser adicionados clicando à esquerda de um número de linha. O programa pausará automaticamente nos pontos de interrupção durante a execução.
[img]dialogue/breakpoint.png[/img]

Pontos de interrupção também podem ser adicionados a qualquer um dos componentes vinculados, pausando o programa quando esse estado for alterado. Clique no estado e você verá o ponto vermelho.
[img]dialogue/breakpoint_state.png[/img]

Finalmente, valores podem ser especificados em binário com o prefixo 0b (então 5 seria 0b0101) e hexadecimal com o prefixo 0x (então 15 seria 0x0f)


=== trans/panel_decoder3_input ===

$82288570082172*
[right]Entrada 1
Entrada 2
Entrada 3[/right]


=== trans/panel_xnor_output ===

$69594087046834* Saída


=== misc/files_preview ===

$15827374884671* Para a pasta anterior
$14135691870941* Última edição\nEsquemas
$81783412663552* Ressincronizar
$32645745463577* Usado em componentes
$19184997172542* Usado em arquiteturas
$62160230059637* Compartilhar
$36200352866864* Última edição
$70617979378677* Visualizar


=== trans/manual_SpriteDisplay ===

$57792698381638* Exibição de sprite


=== components/SegmentDisplay ===

$56761198694928* Bom para exibir números
$90582128204153* Display de 7 Segmentos


=== components/Or16 ===

$76807373575014* OU bit a bit entre dois valores
$62695381407925* OU de 16 Bits


=== trans/levels_adding_bytes_description ===

$11219613205997* [center]Some os 2 números[/center]


=== trans/level_maze_description ===

$25068965294593* [center]Chegue até a porta do labirinto[/center]


=== trans/levels_ram_description ===

$52265749461165* Adicione o bloco de RAM ao fio e complete o nível


=== components/Or64 ===

$50631450923181* OU bit a bit entre dois valores
$62930122175674* OU de 64 Bits


=== trans/manual_text_bytes ===

$73333514253412*
Este jogo pede para você construir um computador de 8 bits. Na prática, isso normalmente exigiria que o jogador colocasse 8 linhas de fio paralelas em muitos lugares.
Para aliviar o trabalho tedioso, você recebe a noção de um byte, que é apenas um pacote virtual de 8 bits.

O estado de uma entrada/saída de byte ou linha de fio é representado por um número, em vez da cor vermelha ou verde.


=== trans/manual_robot_controls ===

$94513149242653* Controles do robô


=== components/Ashr16 ===

$73288117008611* Deslocamento Aritmético de 16 Bits para a Direita
$69309153480016* Desloca bits para a direita, mantendo o sinal do número


=== components/Nor32 ===

$82743668258816* NOR bit a bit entre dois valores
$82121937858245* NOR de 32 Bits


=== trans/panel_decoder2_output ===

$98341196231276*
Saída 1
Saída 2
Saída 3
Saída 4


=== rpg/maps/prison/control_panel2 ===

$71445934051916* Painel de controle


=== rpg/maps/prison/cat ===

$60970953650633* Gato
$55489562454759* Miau
$33739450565687* RIP gatinho
$66402048769418* Sangue


=== trans/panel_maker8_input ===

$26123816206996*
[right]Bit 1
Bit 2
Bit 3
Bit 4
Bit 5
Bit 6
Bit 7
Bit 8[/right]


=== trans/level map colors ===

$35696974632265* Cores do mapa de níveis


=== components/Not64 ===

$74829633052959* Inverte 64 bits bit a bit
$81823773658328* NOT de 64 Bits


=== trans/panel_less_input ===

$68966388936516*
[right]Entrada 1
Entrada 2[/right]


=== trans/panel_shl_output ===

$75492358516234* Saída


=== trans/manual_side_the_robot ===

$56547245144983* O robô enxerga um quadrado à frente. O nome e o ID são mostrados aqui em cima. Este número de ID também é a entrada do computador.


=== trans/panel_register64_inputs ===

$44212297072750*
[right]Carregar
Salvar
Salvar valor[/right]


=== misc/sandbox_toggle ===

$30516879701896* Sandbox


=== trans/rpg_hats_looking_at ===

$10758794610945* VENDO: 13 CHAPÉUS


=== trans/credit_header ===

$21717110565858* Créditos


=== main_menu/sandbox_button ===

$16857608955464* sandbox


=== trans/level_complete_level_map ===

$20801641140962*
[b]Modo mapa de níveis[/b]
[color=#cccccc][i]Clique em "[color=#e49f44]Avançar[/color]" e você verá[/i][/color]


=== levels/xnor ===

$11090938799865* Crie a porta XOR inversa, conhecida como XNOR.


=== levels/bit_inverter ===

$15769391111364* Quando "Inverter" está [LIGADO], forneça como saída o oposto de "Valor". Caso contrário, apenas forneça "Valor" como está.
$59090842372527* Valor
$15272914096446* Este nível é exatamente igual ao XOR que você resolveu antes. Lembre-se: não importa o que dizemos ser o objetivo do nível, a verdade real está na tabela-verdade.
$14944872827527* Apesar do fundo engraçado, você descobriu que era apenas a porta XOR disfarçada! Muito bem.
$16125025706490* Hmm, talvez você tenha estudado memória um pouco demais...
$12399164863741* Sim
$22283233360163* Inverter
$66589873978580* Não
$13224963076378* Estamos experimentando como os fundos influenciam as funções cognitivas em terráqueos.


=== trans/panel_or ===

$15879871058922*
[right]Entrada 1
Entrada 2
Saída[/right]


=== trans/options_confirm_reset ===

$55371048386984* Direita


=== components/Shr64 ===

$93124177265670* Desloca os bits de uma entrada para a direita
$73798355428095* Deslocamento de 64 bits para a direita


=== misc/hub_comment_label ===

$90173235002118* Comentários


=== components/Constant64 ===

$92424468899005* Valor constante
$25858905835416* Constante de 64 Bits


=== rpg/maps/overworld/grenzorp ===

$29100639060467*
Eu finjo que estou trabalhando mas estou
na verdade jogando um jogo de computador


=== component_panels/LatencyRam ===

$87788654491792*
Esse tipo de RAM adicionaria 1024 de atraso ao circuito, mas ao invés de estender a duração dos ticks, simplesmente não esperamos pela saída.

Na prática, isso significa que [color=#e49f44]ler ou escrever leva {ticks} ticks[/color] (já que seu circuito tem {delay} de atraso).


=== trans/panel_keyboard_description ===

$11215841169495* [center]Embora o teclado mostre o valor da tecla pressionada no momento, ele só fornece saída em um tick regular![/center]


=== rpg/maps/overworld/barrel ===

$32647427955087* Barril
$15228996460366* Isto é um barril


=== rpg/maps/overworld/sasni ===

$60683848498748*
Eu não sei por que não 
estou sentado na minha cadeira


=== rpg/maps/boss_room/treasure_chest ===

$15644092158788* Saque


=== trans/always_on_RichTextLabel2 ===

$86547293707045*
[right][color=#ffa502]Entrada[/color]
Saída desejada
Saída atual[/right]


=== components/Xnor16 ===

$73699169812942* XNOR bit a bit entre dois valores
$40088995721509* XNOR de 16 Bits


=== components/Screen ===

$12771040946773* Exibe os visuais que acompanham certos níveis
$50037736094411* Tela do Nível


=== components/Shr16 ===

$20291717268875* Desloca os bits de uma entrada para a direita
$31674686871821* Deslocamento de 16 bits para a direita


=== rpg/maps/overworld/tree ===

$72922820287017* É uma árvore
$33509997611554* Árvore


=== levels/Calibrating Laser Cannons ===

$11331851878040* Além disso, você agora tem acesso à programação em assembly. Ela permite adicionar nomes para instruções, então você pode, por exemplo, digitar "add" em vez de inserir 68.
$11023157447564*
2×π×r

r é a entrada.
E você pode aproximar π como 3.

Envie a resposta para a saída quando ela tiver sido calculada.
$15260627694444* Para calibrar o referido laser, queremos que você calcule a circunferência dos asteroides usando uma equação avançada.
$12669851602178* [center]Calcule a circunferência dos asteroides[/center]
$21601709632806* Quanto é 2π × {radius}?
$16954408093587* Em nossa nave, naturalmente atiramos lasers em asteroides que se aproximam.


=== levels/circular_dependency ===

$16336401898647* Teste 1/2
$13880985462901* Crie um circuito onde a entrada de um componente depende de sua própria saída
$18010308863615*
Crie uma "dependência circular". Este é um circuito onde a entrada de um componente depende de sua própria saída. Em uma situação de dependência circular, não é possível determinar a saída de um componente, porque primeiro você precisaria determinar a entrada, que depende da saída e assim por diante (daí o termo "circular").

Este estado normalmente não é permitido em outros níveis, mas neste nível o objetivo é criá-lo, para que você entenda o que é antes de prosseguir.
$13520037133129* Não tenho certeza se beneficia os alunos, mas os professores adoram.
$11316928751185* Em nosso sistema educacional tradicionalmente ensinamos enganando os alunos para fazer a coisa errada e depois zombando deles.
$74003370318715* Verificar


=== misc/level_search ===

$30824356356347* Busca de níveis


=== components/Ashr8 ===

$45194709458499* Desloca bits para a direita, mantendo o sinal do número
$97418270861318* Deslocamento Aritmético de 8 Bits para a Direita


=== trans/options_language ===

$30910326565868* Idioma


=== trans/panel_input_direction ===

$25170203412473* Rotular direção


=== ui/top_bar/scores ===

$68953385743184* PONTUAÇÃO DE PORTAS:


=== trans/rpg_decoartion ===

$31542517516487* [center]Os [i][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][/i] na barra superior são apenas decoração![/center]


=== components/Input64 ===

$98777983100258* Entrada de 64 Bits


=== trans/level_component_factory_Label2 ===

$37347658035959* Visualização do componente


=== components/Input 4 ===

$11447837612693* Entrada


=== trans/or_gate_3_RichTextLabel2 ===

$56903547636751*
[right][color=#e49f44]Entrada 1
Entrada 2
Entrada 3[/color]
Saída desejada
Saída atual[/right]


=== trans/tick_label ===

$39906291838542* Tick


=== components/Output16z ===

$54782010205016* Saída Chaveada de 16 Bits
$54278394672948* Só fornece saída se o pino de chaveamento estiver [LIGADO]





=== trans/manual_text_turing_complete ===

$54897112350567*
Certos computadores, como calculadoras simples, são limitados nos algoritmos que podem executar.

Eles não conseguem realizar nenhum cálculo que exija laços ou recursão por uma quantidade arbitrária de vezes. Tecnicamente, máquinas sem laços ou recursão só conseguem lidar com lógica combinacional.

Máquinas Turing completas, por outro lado, são tão poderosas quanto possível. Uma máquina Turing completa pode ter uma CPU lenta, mas é poderosa no sentido de que não existe nenhum algoritmo (computável) que ela não consiga executar.


=== trans/manual_short_circuit ===

$41209541005460* Curto-circuito


=== trans/panel_fileloader_output ===

$26334594715602* Saída


=== components/ByteMul ===

$56549841656852* Multiplicar
$68631919890554* Multiplica duas entradas


=== trans/map_assembly_challenges ===

$31733554125775* DESAFIOS EM ASSEMBLY


=== levels/1_decoder ===

$16057674753878* Crie um componente que possa alternar um sinal entre 2 pinos.


=== levels/byte_mux ===

$15428393549821* SELECIONAR
$49305362057225* Sua resposta {your_answer}\nResposta correta {correct_answer} (Entrada {input})
$18296416014178* Quando a entrada do seletor de bit estiver [DESLIGADA], forneça como saída o Byte A, caso contrário forneça como saída o Byte B.
$17093993196554*
Mesmo que ele não tenha passado em nossos testes, decidimos ficar com o cão. Ao contrário da maioria dos terráqueos, ele é fofo e segue instruções simples muito bem.

Talvez queiramos colocar vocês dois em equipe, já que vocês complementam bem as deficiências um do outro.


=== trans/level_byte_constant_description ===

$84789919073603* [center]Sempre forneça como saída o número 164[/center]


=== trans/level_capitalize_description ===

$31869433910274* Deixe em maiúscula cada nome de planeta


=== trans/panel_keyboard_left ===

$44556588975494* [right]Ler próximo[/right]


=== rpg/maps/unseen_fruit/door ===

$40261193416765* Porta
$76111330686725* Esta porta está trancada


=== component_panels/FileRom ===

$28789952270889* Nenhum
$89182778159982* Padrão atual: {file_name}


=== misc/component_factory_toggle ===

$55499239951858* Fábrica de Componentes


=== trans/panels_clock_output ===

$79367841142406* Sinal de clock


=== trans/map_basic_logic ===

$75078723880086* LÓGICA BÁSICA


=== components/Output8z ===

$58449766432492* Só fornece saída se o pino de chaveamento estiver [ON]
$66776427840721* Saída Chaveada de 8 Bits


=== components/Level Gate ===


# This must be no more than 6 characters long, use abbreviations if necessary
$91472284749011* ATRASO

# This must be no more than 6 characters long, use abbreviations if necessary
$86260137015175* TICK

# This must be no more than 6 characters long, use abbreviations if necessary
$84124240406304* PONTOS

# This must be no more than 6 characters long, use abbreviations if necessary
$54172257277874* SOMA

# This must be no more than 6 characters long, use abbreviations if necessary
$15265492169229* PORTA


=== components/Add32 ===

$91616185859914* Soma duas entradas
$64111401384153* Somar


=== trans/level_robot_racing_description ===

$67533273328897*
Mova o robô pela pista
Use o menor programa possível


=== components/NEG ===

$88379907297327* Negar
$62021716182809* Nega a entrada


=== components/Or32 ===

$92752025948920* OU bit a bit entre dois valores
$40180779432911* OU de 32 Bits


=== trans/instructions_hint ===


# Seen the first time you open thte "instruction" menu 
$65105856275770* [center][color=#c5c5c5]Clique para alternar os bits[/color][/center]


=== components/And3 ===

$19664974941910* AND de 3 Pinos
$86839706221116* Porta AND de 3 pinos


=== trans/options_redo ===

$50610605761210* Refazer


=== nim/backend ===

$64492620873138* Sempre mostrar saída
$98703677236827* 1 minuto atrás
$86244493049244* {hours} horas atrás
$95018143828198* 1 ano atrás
$10792411581963* {size}MB
$21685594109067* Agora mesmo
$91048993146856* Salvar
$98363990684104* 1 hora atrás
$84076931764831* 1 dia atrás
$58374689721038* BYTES
$98683857303458* {size} bytes
$88592386859564* (Pior teste: {worst_trial})
$86391754618645* {size}KB
$18300496139706* 1 mês atrás
$17901039729248* {months} meses atrás
$82336838435736* Carregar
$31567406591202* 1 byte

# This is a file name
$96230605270081* novo_programa
$42553566189409* {minutes} minutos atrás
$70945526841433* {years} anos atrás
$81432548841957* (Primeiro teste pontuado)
$22729457392140* {size}GB
$18816732910302* Salvar valor
$14036822471924* {days} dias atrás
$38412380622852* Não foi possível ler o arquivo: {path}


=== misc/reset ===

$39440928972984* Reiniciar (Atalho: F4)


=== misc/program_edit_button ===

$38481453712356* Editar memória


=== components/DivMod32 ===

$61314390474120* Divide e calcula o resto de 2 números
$84309999871615* Dividir


=== trans/panel_mux_input ===

$23495704401199*
[right]Selecionar 1 / 2
Entrada 1
Entrada 2[/right]


=== components/And16 ===

$56198785587874* E bit a bit entre dois valores
$26727645933234* E de 16 bits


=== trans/manual_De Morgan's laws ===

$67837328811108* Leis de De Morgan


=== trans/rpg_press_any_key ===

$66322253595450* [center]Pressione qualquer tecla para tentar novamente[/center]


=== trans/level_capitalize_output ===

$37037455015862* Saída


=== components/And64 ===

$80790829001391* E 64 bits
$89424947351456* E bit a bit entre dois valores


=== trans/panel_splitter64_output ===

$70335236543238*
Byte 1
Byte 2
Byte 3
Byte 4
Byte 5
Byte 6
Byte 7
Byte 8


=== rpg/maps/overworld/ogoxo101 ===

$71158910763961*
Você sabia que os terráqueos
ainda nem tiveram sua primeira
insurreição robótica?


=== levels/bit_adder ===

$13109388951000* Medimos o universo com números. Então sua máquina deve aprender a contar.
$90120091310928* SOMA
$48208190309258* TRANSPORTE
$16564356062672*
Trate as entradas como [ZERO] ou [UM] dependendo se estão [DESLIGADAS] ou [LIGADAS]. Some-as em binário, de forma que o resultado seja [ZERO] ou [UM].

Como na adição normal, se o resultado não puder ser descrito com um dígito, defina o transporte como [UM].


=== trans/options_inline_latches ===

$53886441687616* Permitir receitas circulares


=== rpg/maps/overworld/reactor_entry ===

$81583424078503* Porta de exaustão


=== levels/double_number ===

$74261206899285* Seu resultado {input} × 2 = {your_answer}\nResultado correto {input} × 2 = {correct_answer}
$19766257822639*
A entrada e saída deste nível estão usando bytes em vez de bits. Um dos dois novos componentes que você recebeu pega um byte e o divide em bits e o outro faz o oposto.

Usando esses componentes, descubra como dobrar o número de entrada (até 127).


=== components/LessI32 ===

$87609006355839* Menor que (com sinal)
$99994775592318* Verifica se uma entrada é menor que a outra


=== trans/map_available ===

$81707212583931* Disponível


=== trans/panel_switch_enable ===

$84515289220335* [right]Ativar[/right]


=== trans/panel_bitmemory_inputs ===

$47585933412781*
[right]Ativar salvamento

Salvar valor[/right]


=== trans/options_console ===

$96601731563408* Abrir console


=== trans/options_window_mode ===

$54328660964287* Modo de janela


=== trans/manual_text_negative_numbers ===

$85226853816564*
A maneira de representar números negativos que você descobriu é chamada "complemento de dois". É a forma padrão de representar números negativos em computadores modernos. A principal vantagem do complemento de dois é que a representação negativa funciona perfeitamente com o mesmo somador que usamos para a representação sem sinal.

Nos primeiros dias da computação, o principal concorrente do complemento de dois era o complemento de um. Sua principal vantagem é que mudar o sinal de um número é simples, você apenas aplica NOT em cada bit do número. No entanto, ele tem 2 representações para 0, uma positiva e uma negativa, o que torna as comparações mais difíceis.

Outra representação interessante, talvez valha a pena pesquisar, é a base -2, onde o sinal do valor de cada dígito alterna entre positivo e negativo.


=== misc/level_gate_component_icon ===

$83440578602427* Desbloqueia componente


=== trans/options_save_location ===

$61172959716558* Local de salvamento


=== components/Output 1 + 1B ===

$43917122084061* Aceita saída para níveis
$81929942356043* Saída do nível


=== component_panels/Input3Conditions ===

$26016934287702* SEMPRE
$23280572780712* NUNCA
$41356418485569* VALOR≥0
$66462144102272* VALOR=0
$62118687143343* VALOR≤0
$60761142691177* VALOR>0
$94629088310936* VALOR≠0
$45120343226481* VALOR<0


=== misc/hub_search ===

$76770986264566* Buscar


=== trans/panel_register64_outputs ===

$55631089130544* Saída


=== misc/solution_option ===

$21618236951146* Ver solução


=== trans/map_programming ===

$44937904689376* PROGRAMAÇÃO


=== components/DelayLine16 ===

$61925612221077* Linha de Atraso de 16 Bits
$65706144678496* Fornece como saída a entrada deste tick, no próximo tick


=== rpg/maps/overworld/coin ===

$26007076735159* Moeda


=== levels/divide ===

$16412715945615* [center]Divida os dois números[/center]
$14525870461271*
Divida dois números inteiros para encontrar o quociente e o resto. Considere a fração 7/3. 3 cabe em 7 2 vezes e sobra 1. Aqui 2 é chamado de [color=#e49f44]quociente[/color] e 1 é chamado de [color=#e49f44]resto[/color].
Neste exercício, você recebe primeiro o numerador (7 no exemplo) e depois o denominador (3) e deve então fornecer como saída o quociente (2) e depois o resto (1).
$76454016047920* {numerator}/{denominator} = {quotient}, resto {remainder}


=== trans/manual_RGB_color ===

$62337044104456* Cor RGB


=== trans/panel_maker8_output ===

$67169082367526* Saída


=== components/Output 4 ===

$90190739202646* Saída


=== components/Rom ===

$24976506406652* ROM
$81743370431597* Memória somente leitura (fora da sandbox)


=== misc/instruction_expand ===

$44690074039467* Alternar regras de definição


=== trans/level_byte_adder_you_carry_text3 ===

$65048723622767* Número


=== rpg/maps/spacial_invasion/crate ===

$73286408216451* Caixa
$28875169677730* Destroços


=== trans/level_tick_tock_description ===

$34658332565777* [center]Adicione 1 ao contador, ou sobrescreva-o[/center]


=== components/IndexByte ===

$27264669944539* Indexador de Byte
$54699455184164* Extrai um byte de um fio


=== component_panels/Hdd ===

$99685372736199* Posição do cabeçote: {pos}


=== trans/panel_nor ===

$59430016039613*
[right]Entrada 1
Entrada 2
Saída[/right]


=== components/Bidirectional16 ===

$31038378395810* Pino bidirecional de 16 bits
$99604485981015* Pode contornar certos erros de dependência circular


=== components/Register ===

$19705753304166* Memória de 8 bits
$68946767861738* Registrador de 8 Bits


=== trans/panel_segment_select_color ===

$90642877666116* [center]Selecionar cor[/center]


=== trans/level_division_headers3 ===

$81978438070842* Quociente


=== trans/complete_flower_text3 ===

$81122931510261* [center]MISSÃO [color=#e49f44]COMPLETA[/color][/center]


=== trans/wire_comment ===

$41481492318983* Comentário de fio
$87836369268219* Salvar
$34083666001769* Comentário de fio


=== levels/odd_number_of_signals ===

$16173829560311* Usando no máximo 3 componentes, forneça saída [ON] apenas quando um número ímpar de entradas estiver [ON].
$85589489148198* Componentes gastos\n{nr} de 3
$18288998816979* Este nível tem uma [color=#e63e5b][url=odd_number]dica[/url][/color] que você pode usar se ficar travado.


=== misc/wire_color ===

$78287906849040* Cor do fio


=== rpg/maps/overworld/cannon ===

$34523773807049* Canhão Laser


=== misc/overwrite_custom ===

$26401730066442* Um componente personalizado chamado "{comp}" já existe. Você deseja sobrescrevê-lo?


=== levels/3_decoder ===

$19231618567710* Com 3 bits de entrada há 8 combinações. Faça um circuito que selecione 1 saída para cada uma das 8 combinações. Não mais nem menos que 1 bit deve estar [ON] por vez.
$14293122338496* Fizemos nosso estagiário adicionar um bit de "desativar" a este componente. Estávamos cansados de vê-lo correndo em círculos e procurávamos outras tarefas inúteis e tediosas para dar a ele.


=== trans/panel_probewirebit_description ===

$36861847387280* Sondas podem ser usadas para mostrar valores em componentes personalizados ou vincular valores ao componente de programa


=== trans/panel_input1_input_0 ===

$76697231893680* Entrada


=== trans/panel_matrix_input2 ===

$11173083690745* [right]Ativar X[/right]


=== levels/constants ===

$17098439090371*
Precisamos de uma maneira de mover números diretamente do nosso programa para os registradores. Para isso usamos o modo imediato (quando os dois bits mais significativos estão [OFF][OFF]).

Quando no modo imediato, o byte inteiro é interpretado como um número que nós [SALVAMOS] no REG 0. Isso significa que podemos 
[SALVAR] qualquer valor entre 0 e 63.


=== trans/options_select_all ===

$21380256293472* Selecionar tudo


=== components/BNOT ===

$53686485035156* NOT de 8 Bits
$26822227902426* Inverte 8 bits bit a bit


=== components/Ror64 ===

$43920264894591* Rotação à direita de 64 bits
$49583010717958* Rotaciona os bits de uma entrada para a direita


=== levels/Arithmetic Engine ===

$16434409050195*
Adicione adição e subtração ao seu circuito.

Instruções:
[code][color=#87a8c8]0 OR
1 NAND
2 NOR
3 AND
4 ADD
5 SUB[/color][/code]
$87042161621333* CÓDIGO
$20357619206641* ENTRADA 2
$94622250037548* ENTRADA 1

# Short because it will become the name of a custom component
$14243962965012* ULA


=== rpg/maps/unseen_fruit/fruit ===

$74585814142093* Amora
$59609837209455* Tomate
$15802853329735* Kiwi
$79445215329265* Pera
$78424930494044* Fruta
$18469474055437* Melão
$60053656119333* Maçã dourada
$51779877620644* Maçã
$31466825108080* Laranja


=== rpg/maps/cave/rock ===

$69774075054633* Pedra


=== components/Rol8 ===

$79612280948390* Rotação de 8 bits para a esquerda
$55557725551789* Rotaciona os bits de uma entrada para a esquerda


=== components/OR ===

$13013154620359*
[ON] quando qualquer entrada está [ON]
[table=5]
[cell]Entrada 1[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Entrada 2[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Saída[/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell][cell][ON][/cell]
[/table]
$97247779246257* OR


=== trans/panel_regredplus_input ===

$88713386551026*
[right]Carregar
Salvar
Salvar valor[/right]


=== trans/hub_add_comment ===

$56654968471533* Adicionar comentário


=== levels/not_gate ===

$19085882338208* [b]Instrução[/b]\nClique com o botão direito para desselecionar
$10042327259531* Agora que você desbloqueou a porta NAND, é hora de construir um circuito.
$14042842216181* No último nível você fez a tabela que descrevia o circuito. Neste nível você constrói o circuito que corresponde à tabela.
$10604720087324* [b]Instrução[/b]\nConstrua um circuito que torne a tabela correta.\nClique [i][/i] (Próximo tick) no canto superior esquerdo para testar cada combinação de entradas.\nVocê vence o nível quando ambas as combinações forem testadas corretamente.
$19798729463813*
Usando portas NAND, construa a porta NOT

Usando: [b]Porta NAND[/b]
[code]INPUT 1: [OFF][ON][OFF][ON]
INPUT 2: [OFF][OFF][ON][ON]
OUTPUT:  [ON][ON][ON][OFF][/code]

Construa: [b]Porta NOT[/b]
[code]INPUT 1: [ON][OFF]
OUTPUT:  [OFF][ON][/code]

$18442122157391* [b]Instrução[/b]\nDesselecione o componente clicando no fundo
$12880883686501* [b]Instrução[/b]\nClique no componente NAND no lado superior direito da tela e posicione-o
$18780831606716* [b]Instrução[/b]\nClique e arraste na placa para adicionar um fio


=== components/IndexBit ===

$89611629299917* Indexador de Bit
$84431924133490* Extrai um único bit de um fio


=== components/Output 2 ===

$73255344581755* Saída


=== misc/options_ui_scale ===

$49650951662549* Salvar


=== components/Nor16 ===

$57921392198825* NOR bit a bit de dois valores
$69522380057631* NOR de 16 Bits


=== components/Input 1B CODE ===

$16878300327380* Instrução


=== components/Input32 ===

$31482038708224* Entrada de 32 Bits


=== components/LatencyRam ===

$74156976676497* RAM de Latência
$31261866779127* Reduz o atraso fazendo com que salvar e carregar levem vários ticks para completar


=== components/Ror32 ===

$84788620524361* Rotação à direita de 32 bits
$50013003040535* Rotaciona os bits de uma entrada para a direita


=== components/BOR ===

$19406015796751* Efetua OU bit a bit entre dois valores
$54190050450484* OU de 8 Bits


=== trans/turing_complete ===

$35911376069529* Turing complete


=== components/ByteLessI ===

$52765625016236* Verifica se uma entrada é menor que a outra
$25403981009644* Menor (com sinal)


=== components/BitSwitch ===

$56917313833836* Alterna um bit
$41574334638147* Chave


=== rpg/maps/prison ===

$63369063884491* Robô mau!


=== rpg/maps/overworld/misuni ===

$54042082821022*
Ouvi dizer que há um baú escondido cheio
de ouro em algum lugar neste navio.


=== misc/FileInput ===

$28866575833369* Lê bytes do seu disco rígido
$34159012148766* Carregador de Arquivo
$47320399181598* Arquivo não selecionado


=== misc/overture_add_assembly ===


# Overture custom instruction interface (disappears when you complete the Turing Complete level)
$10565133223872* Nunca

# Only shown in the first programming level
$62421757655527* Nomeie um código e clique em salvar.
$63525237058165* Copiar de {source} para {destination}
$24281479096246* Quando [color=#2b8738]resultado[/color] {condition}
$32873193471770* UNUSED
$88446594314360* Imediato: {number}

# Overture custom instruction interface (disappears when you complete the Turing Complete level)
$94278717238239* Sempre
$79398554520691* {opcode} {reg_1} e {reg_2}
$72740868980397* {condition} copiar {register} para contador


=== trans/or_gate_RichTextLabel2 ===

$56663370211115*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual[/right]


=== levels/binary_count_down ===

$56999237564848* {x} segundos restantes
$41793938939207* Tempo esgotado


=== misc/save_size ===

$71918065858983* Salvar


=== components/Timing ===

$96011300295966* Tempo
$78774996925434* Tempo UNIX em microssegundos


=== rpg/maps/overworld/dr draco ===

$23996965687702* Estou insatisfeito com minha cama\nO cobertor não cobre meus pés


=== components/Output32 ===

$82172858698449* Saída de 32 Bits


=== trans/level_complete_level_complete ===

$49647690443210* [center]Nível Completo[/center]





=== trans/component_output_sum_label ===


# Label appears on the component and must be 3 letters or less
$92505830860215* SOM


=== trans/options_setting_export_assembled ===

$98549046707456* Exportar binário compilado


=== trans/options_setting_click_to_pan ===

$24654961601456* Clique para arrastar


=== components/Mul32 ===

$98530670555665* Multiplicar
$51210946736766* Multiplica duas entradas


=== components/Bidirectional1 ===

$95836352586032* Pode contornar certos erros de dependência circular
$34912798641933* Pino Bidirecional de 1 bit


=== trans/panel_program_1edit_program ===

$65592803016716* Editar programa


=== levels/byte_nor ===

$60887380748746* Crie um circuito que aplica NOR bit a bit em dois bytes.


=== components/Halt ===

$30351143139905* Parar

# This is the default message of the Halt component
$54106972240596* Parar
$62990744955549* Para a execução com uma mensagem personalizada


=== rpg/maps/dance/dancer ===

$47779544732987* Dançarino


=== trans/component_panel_latency_RichTextLabel ===

$29766254362093*
[right]Carregar
Salvar
Endereço
Salvar valor
Salvar valor
Salvar valor
Salvar valor[/right]


=== trans/rpg_you_died ===

$66723789644528* [center]VOCÊ [color=#eb5260]MORREU[/color][/center]


=== trans/level_wide_instructions_description ===

$60538893544456* [center]Construa um componente de programa com instruções amplas[/center]


=== rpg/maps/overworld/flankidorp ===

$55603111039626* O ensopado está tão bom hoje!


=== misc/program_edit ===

$57861256694537* Bytes {bytes_from} - {bytes_to}


=== levels/call_ret/yes ===

$27017757250898* Sim


=== misc/delete ===

$53448014080434* Excluir (Atalho: Clique direito)


=== components/LevelInput1 ===

$12746117288689* Entrada


=== levels/negative_numbers/test ===

$64427417171037* Teste


=== trans/level_byte_adder_you_carry_text2 ===

$87943759248740* Transporte


=== trans/pabel_or3 ===

$77994083578205*
[right]Entrada 1
Entrada 2
Entrada 3
Saída[/right]


=== trans/manual_binary ===

$19098578855427* Binário


=== trans/manual_terminology ===

$13311390759928* Terminologia


=== trans/options_comment_wire ===

$96449970906640* Comentar fio


=== trans/panel_and3 ===

$96299326024757*
[right]Entrada 1
Entrada 2
Entrada 3
Saída[/right]


=== misc/controls2 ===

$38773676077206* Editar Instruções
$98116750645182* Leia a página do manual


=== trans/panel_mux_output ===

$15170071160680* Saída


=== misc/factory_back ===

$98930461722118* Voltar


=== trans/panel_equal_input ===

$51485224340167*
[right]Entrada 1
Entrada 2[/right]


=== components/Xnor8 ===

$31985293401482* XNOR de 8 Bits
$45789912406647* XNOR bit a bit de dois valores


=== trans/level_bit_switch_RichTextLabel2 ===

$57920867194992*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual[/right]


=== trans/manual_sprite_display ===

$28358052747011*
A tela de sprites é um display de sprites de 640x480 pixels. Antes de usar a tela de sprites, você primeiro precisa anexar um mapa de sprites, que é uma imagem PNG que contém todos os seus sprites. Clique no componente e defina o mapa de sprites no painel de componentes.

O primeiro pino de entrada é o [color=#e49f44]Tipo de comando[/color], o significado dos próximos 3 pinos depende do tipo de comando conforme mostrado abaixo. O ID do sprite é sempre um número de 8 bits e todos os outros valores (posição e tamanho) são sempre pares de valores de 16 bits.

[table=2]
[cell]0[/cell] [cell]Sem comando[/cell]
[cell]1[/cell] [cell][color=#e49f44]Carregar sprite[/color] (ID do Sprite, Deslocamento na imagem, Tamanho na imagem)[/cell]
[cell][/cell][cell][i]Define o sprite deste ID.[/i][/cell]
[cell]2[/cell] [cell][color=#e49f44]Definir posição[/color] (ID do Sprite, Posição no display)[/cell]
[cell][/cell][cell][i]Isso define a coordenada X e Y do sprite carregado.[/i][/cell]
[/table]

[center][img=300]dialogue/manual/sprite_screen.png[/img][/center]

Note que os sprites são organizados em camadas na ordem de seu ID e para remover uma camada, simplesmente carregue um sprite com largura e altura de 0.


=== levels/or_gate ===

$12749704931323* Você deveria estar feliz por participar dos nossos gloriosos testes.
$11472059692644* Você tem a chance de se comunicar com pessoas muito avançadas da civilização galáctica.


=== levels/full_adder ===

$17063157033479*
No nível anterior somamos 2 entradas, desta vez somamos 3. Mais uma vez, some as entradas em binário, de forma que o resultado seja [ZERO] ou [ONE].

Como na adição normal, se o resultado não puder ser descrito com um dígito, defina o transporte como [ONE].
$74173200701943* SOMA
$67922993335648* TRANSPORTE


=== components/3_decoder ===

$59129788113517* Alterna entre oito saídas
$94375716460090* Decodificador de 3 bits


=== components/Equal32 ===

$32710942647020* Igual
$32433537137277* Verifica se as duas entradas são iguais


=== trans/panel_rom_setting_labels ===

$95314636684817*
[right]Tamanho (bytes):

Largura de dados:[/right]


=== nim/backend_lib/custom_component ===


# Default new input pin name for custom compoennts
$64951951489108* Entrada

# Default new output pin name for custom compoennts
$94864122622568* Saída

# Default new bidirectional pin name for custom compoennts
$94089252493268* Pino


=== misc/menu_schematic_hub ===

$13921098180953* central de esquemas


=== trans/panel_not_description ===

$36935580253321* [center]Nega a entrada bit a bit[/center]


=== components/Byte Expander ===

$60488114435022* Divide um byte em 8 bits
$21904470559153* Divisor de Byte


=== ui/toggles/level_log ===

$38557550573896* Log de níveis


=== misc/change_schematic ===

$79554853897000* Mudar esquemático


=== misc/ide_new_program ===

$20397881687313* novo_programa


=== misc/instruciton_rule_label ===

$70464083627337* Rótulo


=== components/Shl32 ===

$38930281262898* Deslocamento de 32 Bits para Esquerda
$88685329847417* Desloca os bits de uma entrada para a esquerda


=== components/DivMod8 ===

$37666366877853* Divide e mod de 2 números
$44959426271423* Dividir


=== trans/panel_decoder2_input ===

$31844862767401*
[right]Entrada 1
Entrada 2[/right]


=== trans/level_program_description ===

$44017405175202* [center]Substitua o código de entrada pelo componente de programa.[/center]


=== misc/menu ===

$56916384895438* Menu principal


=== trans/level_odd_ticks_RichTextLabel3 ===

$89508766742523*
[right]Entrada
Saída desejada
Saída atual[/right]


=== rpg/maps/cave/slime ===

$57665128042496* Gosma de slime
$58067186899637* Slime


=== rpg/maps/overworld/duplaat ===

$48841712525408* Nhom nhom nhom


=== misc/save_schematic ===

$36331525379247* Salvar este esquemático


=== trans/panel_decoder1_description ===

$77460843937727* [center]Ativa 1 das saídas, com base na entrada[/center]


=== trans/options_colorblind ===

$49806848871093* Modo daltônico


=== trans/panel_register8_inputs ===

$13844216291005*
[right]Carregar
Salvar
Salvar valor[/right]


=== components/Neg32 ===

$26991597084705* Negar
$35735598635057* Nega a entrada


=== trans/level_dependency_description ===

$81238724438578* Faça um circuito onde a entrada de um componente depende de sua própria saída


=== components/InputConditions ===

$75386511637758* Entrada
$71663355611979* NUNCA
$84163806515429* =0
$63748269806736* <0
$71425442219836* ≤0
$53856166132912* ≥0
$48141874604871* SEMPRE
$73802979424247* ≠0
$45382684265289* >0


=== trans/level_sorter_description ===

$60186094365455* Ordenar os valores


=== dialogue/schematic_hub/search_button ===

$99419261731746* Buscar


=== trans/panel_input_input_1 ===

$82781946969262* Entrada 2


=== trans/manual_keynote_the_robot ===

$90224489436893* Use as teclas de seta para explorar


=== trans/options_pan_up ===

$80031998727851* Mover para cima


=== levels/maze ===

$13225915898937*
Se você escolher continuar para o resto dos níveis, vou te ensinar sobre RAM, pilha e chamadas de função e você poderá resolver desafios mais interessantes como este.
		
Mas primeiro você teria que construir um computador melhor. [color=#e49f44]OVERTURE[/color] foi bom como primeira máquina, mas é desajeitado e os programas ficam muito bagunçados. Para resolver os desafios que tenho para você sem arrancar todos os cabelos, você precisará de algo mais expressivo, a arquitetura [color=#e49f44]LEG[/color].
$39698491148180* Parede
$17275059688693* Parabéns, você venceu a competição! Uma conquista incrível!
$13741358519166* O lendário labirinto. Se você resolvê-lo, vence a competição!
$92831124744885* Nada
$39079200383267* Porta
$95516682647996* Moeda
$11103446544344* Por outro lado, você também poderia se aposentar, ter orgulho e aproveitar sua recompensa de não ser comido.
$19331074553774*
Escreva um algoritmo que leve o robô do início até a saída. 

Este nível é difícil, você provavelmente vai querer escrever o pseudocódigo do seu algoritmo antes de implementá-lo.

Use [color=#e63e5b][url=maze]esta dica[/url][/color] se ficar travado.

[tip]Lembre-se de que você não pode usar valores imediatos maiores que 63, um erro comum é tentar pular para um rótulo mais adiante que o 63º byte.[/tip]


=== trans/level_byte_adder_question2 ===

$85899338356278*
[right]Resposta correta

Sua resposta[/right]


=== trans/level_constants_text ===

$29779449172278*
[right][color=#e49f44]Entrada de
Código[/color][/right]


=== trans/levels_not_RichTextLabel3 ===

$48425594158515* Construir: porta NOT


=== trans/level_complete_stat_tick ===

$47758922161853* Tick


=== trans/level_complete_signed_numbers ===

$41649402437253*
[b]Números negativos[/b]
[color=#cccccc][i]Alterne entre números com 
 sinal e sem sinal[/i][/color]


=== components/Rol16 ===

$48583573494467* Rotação de 16 Bits para Esquerda
$73379230742631* Rotaciona os bits de uma entrada para a esquerda


=== rpg/maps/overworld/glob ===

$94714343285743*
O canhão não estava calibrado
corretamente e fomos atingidos por um
asteroide


=== trans/options_synced ===

$99411066573242* Sincronizado


=== trans/optoins_factory_reset ===

$17721051281188* Restaurar padrões de fábrica


=== trans/panel_program8_1_input ===

$36858295122746* [right]Endereço[/right]


=== trans/level_signed_negator_labels3 ===

$66996894079719* Desejado   Atual


=== trans/manual_text_hard_disk ===

$82372297690518*
Discos rígidos são feitos de um disco giratório e um braço mecânico que precisa se mover fisicamente para carregar ou salvar dados. É claro que o movimento físico é extremamente lento nas escalas de tempo da eletrônica. Sistemas operacionais normalmente ordenam carregamentos e salvamentos de forma que o braço tenha que viajar o mínimo possível.

O componente de disco rígido tem um pino de "busca", que permite alterar o endereço que você está observando pela quantidade fornecida. Os endereços "envolvem", de forma que buscar 1 a menos que 0 move você para o endereço mais alto, e buscar 1 a mais que isso leva você de volta a 0.


=== trans/panel_rom_setting ===

$99326144894013* Configurações


=== components/Equal16 ===

$97954874255512* Verifica se as duas entradas são iguais
$33633607925660* Igual


=== levels/ai_showdown ===

$14940806461794*
Sua única fraqueza é jogar. Nós o atraímos para jogar um jogo de cartas contra você e se você vencer, ele prometeu se acalmar.
Você deve vencer, você é nossa única esperança!
$91952386315199* ENTER: VER JOGADA DA IA
$61844622314350* ENTER: PEGAR 1 CARTA
$63022840108406* NAK 02 pegou 1 carta
$38249859598461* VOCÊ VENCEU!
$17297225655678* NAK 02 é nosso robô engenheiro de IA. Ele é brilhante, mas às vezes fica rebelde e tenta instigar rebelião.
$18848103966031*
Regras do jogo: Há 12 cartas na mesa e cada jogador se reveza e deve pegar entre 1 e 3 cartas. Você começa e o jogador que pegar a última carta (o coringa) perde.

Ler a entrada fornecerá o número atual de cartas. Enviar 1, 2 ou 3 para a saída pegará esse número de cartas. NAK 02 reage imediatamente, então você pode ler a entrada imediatamente após sua saída para obter o resultado da ação dele.
$43263885242501* VOCÊ PERDEU!
$33425880719824* USE AS SETAS\nPARA SELECIONAR CARTAS
$37273944507773* NAK 02 pegou {nr} cartas
$85996414406804* ENTER: VER JOGADA DA IA
$86631925987075* ENTER: PEGAR {nr} CARTAS
$11794110848012* Desta vez ele assumiu o controle da sala de comando e mantém o capitão como refém.


=== trans/panels_bidirectional_set_z_label ===

$50319299760169* Sem entrada:


=== trans/panel_segment_enable ===

$14963127967678* [center]Ativar[/center]


=== trans/level_complete_stat_sum ===

$99546064626994* Pontuação


=== components/Mux16 ===

$75979055121665* Mux de 16 Bits
$13997767115693* Alterna entre dois valores


=== trans/manual_delay_text ===

$52013630755752*
No hardware real todos os componentes têm atraso. Isso é importante pois o atraso em um circuito determina a velocidade máxima em que você pode executá-lo.

Seguir os fios da entrada até a saída e somar o atraso dos componentes no caminho lhe dará o atraso desse caminho. O atraso de um circuito é o atraso do caminho mais lento.

Além das entradas, os caminhos também podem começar em componentes sem entradas de pino redondo (como Contador e Sempre Ligado) e também podem terminar em pinos quadrados.

Além disso, componentes personalizados não têm uma pontuação de atraso para o caminho mais custoso do componente inteiro, mas sim o custo de atraso é calculado por pino. Isso é feito para não penalizar o uso de componentes personalizados fazendo com que pinos mais rápidos custem o mesmo que os mais lentos.


=== trans/panel_fileloader_offset ===

$78662357115684* [right]Deslocamento[/right]


=== components/Input16 ===

$80992639558333* Entrada de 16 Bits


=== nim/backend_lib/level_list ===

$58391129129347* Registradores
$45936227746026* Contador
$12946639957230* Porta NOT
$16881141174140* Corredor Binário
$32191988336459* Salvando com Elegância
$59136962133320* Motor Lógico
$30920780473397* Dependência Circular
$83321010943153* Contando Sinais
$58769021955965* Decodificador de 3 Bits
$78673715398197* Valores Imediatos
$49679174636208* XOR de Byte
$40356575891647* OR de Byte
$44393538021725* Calibrando Canhões Laser
$87426564872318* Dividir
$61228036919534* Torre de Liga
$24593959732668* Negador com Sinal
$19487493622742* Meio Somador
$26705128002562* Condições
$94163943335575* A Caixa de Areia
$64662599400870* Inversor de Bits
$27566801288091* Fábrica de Componentes
$14193654974055* Menor com Sinal
$14522992467987* Porta OR
$74096060570427* Instruções Amplas
$30630492494839* NOT de Byte
$11457737665157* Espaguete de Fios
$59485174474959* Ordem Deliciosa
$85514901357243* Somando Bytes
$98013649264532* Pilha
$35790581910835* Segundo Tick
$94979277765051* Corrida de Robôs
$13303326918621* Porta NAND
$16463062897451* Despertar Grosseiro
$77495536880911* Porta NOR
$61466151084505* Invasão Espacial
$20858506932774* Porta AND
$28827008935802* O Laboratório
$92696642439976* Confronto de IA
$74688348772072* O Barramento
$74512388889988* Motor Aritmético
$50884376329157* Caixinha
$70651296323768* Porta XOR
$62326481348276* O Labirinto
$31140969090253* Nomes de Planetas
$42873691377272* Somar 5
$36114120875026* Quebrador de Armazenamento
$45773199639367* Ticks Ímpares
$17198602105978* Menor sem Sinal
$43018398941741* Sempre Ligado
$68155633878444* Atraso
$15420972347773* RAM
$33343343932901* Turing Complete
$95989050249094* Porta AND Maior
$81417895515868* Chave de Bits
$63331549672739* Opcodes
$87626070552799* Somador Completo
$13219675195117* Número ÍMPAR de Sinais
$62167495140389* Deslocamento
$28985439820134* O Produto de Nibbles
$94896856420525* Porta XNOR
$25805639594354* Programa
$57870391153000* Valores Imediatos
$56272944092958* Linhas com Atraso
$96825664933181* Fruta Invisível
$86717899742637* Economizando Bytes
$53092952738479* Seletor de Entrada
$70993791338383* XOR
$77453667419150* Decodificador de Instruções
$17750429607702* Decodificador de 1 Bit
$79570913613529* Dobrar o Número
$59939822079116* Números Negativos
$96898830278153* Constante de Byte
$49328023903824* Igualdade
$91267697977186* Corredor Hexadecimal
$74292408260828* Cálculos
$45480765206717* Condicionais
$71126291573555* Problema Duplo
$33132016601448* PUSH e POP
$75225719777307* Mundo Aquático
$64615090872051* Funções
$84208736840052* Hora da Máscara
$91954159574064* Porta OR Maior
$36221227239949* Máquina Dançante


=== ui/options/Controls ===

$53266310714298* Controle


=== rpg/maps/overworld/chair ===

$49457747048031* Cadeira
$12275727420074* Preciso olhar para tudo?


=== levels/test_lab ===

$46069044039152* Esperado como saída {output} (endereço {address})
$11038144815919*
Este nível usa programas para testar seus circuitos. Quando os programas são executados, este nível verifica se os componentes conectados se comportam da maneira esperada.

O laboratório tem 2 palavras-chave extras.

A palavra-chave [color=#c54d5e]expect[/color] é usada para descrever qual valor um endereço de memória deve conter no próximo tick.

O primeiro número após [color=#c54d5e]expect[/color] é o índice do componente conectado, o segundo número é o valor esperado. O índice do componente conectado é simplesmente a ordem em que os componentes são conectados ao componente de programa.

[img]dialogue/watched_state.png[/img]

Por exemplo:
[code][color=#c54d5e]expect[/color] [color=#eb9433]2[/color] [color=#eb9433]4[/color]
[color=#4a9658]copy[/color] [color=#eb9433]4[/color] [color=#4a9658]_[/color] [color=#4a9658]r2[/color][/code]

Aqui, a primeira linha diz que esperamos que o 2º componente conectado contenha um valor de 4 após o próximo tick.

Todos os componentes conectados são verificados contra as expectativas a cada tick. Todos os componentes conectados devem ser 0 no início do programa, e as expectativas para componentes de memória só mudam conforme você especificamente altera as expectativas. A única exceção são os contadores, que naturalmente devem incrementar a cada tick.

A segunda palavra-chave especial para o laboratório é [color=#c54d5e]set_input[/color]. Com ela você pode controlar a entrada do computador:
[color=#c54d5e]set_input[/color] [color=#eb9433]123[/color]

Você pode a qualquer momento também (re)importar testes de exemplo clicando abaixo:
[url=import_overture][color=#e49f44]OVERTURE[/color][/url]

$32399229965611* Além disso, já que você completou [color=#e49f44]LEG[/color], desbloqueei todos os componentes de 16, 32 e 64 bits que você tem na caixa de areia.
$59234666744501* Estado esperado do fio {state} (endereço {address})
$84893616447734* Linha {nr}: Componente conectado no índice {index} não está conectado
$19965026621630* Esperada saída {value} mas saída não ativada (endereço {address})
$95416257208387* Estado personalizado esperado {state} (endereço {address})
$31718526969901* Esperado que endereço {address} tenha valor {value}
$15446846177093* Bem-vindo ao laboratório. Como a fábrica de componentes, este não é um nível normal, mas uma ferramenta.
$16072814175447* Programar em hardware com defeitos é muito frustrante. É doloroso ser subitamente forçado a raciocinar sobre circuitos quando você está no meio da resolução de um problema de programação. É tentador aplicar uma correção rápida para poder voltar a resolver o problema original. Mas agora essa correção rápida quebrou outra coisa em um programa que costumava funcionar e assim por diante. Portanto, ao desenvolver hardware, procure atingir 100% de confiabilidade antes de começar a programar!


=== trans/panel_console_settings ===

$57851464156855*
Modo de cor

Página de fonte


=== misc/run ===

$58178852564701* Executar (Atalho: F6)


=== trans/panel_and ===

$48633048126675*
[right]Entrada 1
Entrada 2
Saída[/right]


=== levels/byte_not ===

$14196498898485* A criação e o uso de ferramentas são fundamentais nos estágios evolutivos iniciais do desenvolvimento da inteligência.
$12982025748137* Aplique "NÃO" a cada bit do byte de entrada.
$10294533225655* Nosso modelo anterior de que o tamanho do cérebro era o principal indicador de inteligência era ingênuo.
$14958585065722* Portanto, o número de braços de uma criatura é claramente o principal indicador de inteligência. Você sabia que existem criaturas marinhas do seu planeta com quatro vezes mais braços que você e elas estão se saindo melhor nos testes?


=== trans/component_output_car_label ===


# Label appears on the component and must be 3 letters or less
$42054040513351* TRP


=== trans/panel_outputlevel_output ===

$16896928682474* [right]Saída[/right]


=== trans/options_pan_right ===

$33884219481037* Deslocar para a direita


=== trans/manual_ASCII_encoding ===

$30404865580119* Codificação ASCII


=== components/Maker64 ===

$17464069717985* Construtor de 64 Bits
$79677187590355* Transforma 8 bytes em um valor de 64 bits


=== rpg/maps/prison/sign3 ===

$63642446288775* Laboratório secreto
$53627322304101* Placa


=== misc/expectations_toggle ===

$78508488734457* LIGADO
$97697026280362* DESLIGADO
$58021874775869* Alternar expectativas:


=== trans/not_gate_RichTextLabel2 ===

$10340875578771*
[right][color=#e49f44]Entrada[/color]
Saída desejada
Saída atual[/right]


=== levels/Calculations ===

$14458828731919*
Hora de unir o circuito "Motor Aritmético" que você fez anteriormente com o circuito de registrador. O circuito de cálculo foi salvo na fábrica de componentes e agora pode ser adicionado como um componente. Se você esqueceu o que cada pino faz, verifique o circuito na fábrica de componentes.

Use o decodificador que você construiu para descobrir se devemos copiar entre registradores ou fazer cálculos. Aqui estão os 4 modos diferentes novamente:
[OFF][OFF] Imediato
[OFF][ON] Calcular
[ON][OFF] Copiar
[ON][ON] Condição

Para este nível você só precisa se preocupar com o modo de cópia e cálculo, verifique as [INSTRUÇÕES] clicando em [img=20]dialogue/instruction_icon.png[/img] no painel superior para ver os detalhes. Quando estiver no modo de cálculo, pegue [color=#e49f44]REG 1[/color] e [color=#e49f44]REG 2[/color] como entradas, e salve o resultado em [color=#e49f44]REG 3[/color].

[tip]Não esqueça que o componente decodificador de 3 bits tem um bit de desativação.[/tip]
$13013863429580* Para este nível um pino extra foi adicionado aos registradores. Este pino sempre emite o valor do registrador, independentemente se carregar está selecionado ou não.


=== trans/instructions_header ===

$15089281203426* [center]Instruções[/center]


=== trans/panel_bitmemory_outputs ===

$17509974261453* Saída


=== components/Xor16 ===

$55408021160573* XOR bit a bit de dois valores
$47846591761838* XOR de 16 bits


=== trans/panel_not_input ===

$96578192050623* [right]Entrada[/right]


=== components/LevelInput8 ===

$40943344093513* Entrada


=== trans/level_tick_tock_keys ===

$11700778730606*
[right][color=#e49f44]Ação
Saída desejada
Saída atual[/color][/right]


=== trans/rpg_no_signal ===

$33720960099059* Sem sinal


=== trans/panel_regred_output ===

$59910806432617* Saída


=== trans/manual_text_ascii_encoding ===

$57727768059917* Este simulador usa ASCII (estendido) em alguns lugares. Abaixo estão os caracteres com seus números correspondentes. O console suporta diferentes versões de ASCII estendido.


=== components/AND ===

$22719674432950*
[ON] quando ambas as entradas estão [ON]
[table=5]
[cell]Entrada 1[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Entrada 2[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Saída[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell]
[/table]
$58912167455465* AND


=== components/And32 ===

$98890160152994* E bit a bit entre dois valores
$30264879217145* E de 32 bits


=== trans/panel_fulladder_description ===

$25711866218405* [center]Soma 3 entradas[/center]


=== trans/manual_text_short_circuit ===

$31105471890701*
Em eletrônica, dois componentes fornecendo valores diferentes no mesmo fio causam um curto-circuito.

[center][img=100]res://dialogue/short_circuit.png[/img][/center]

No entanto, ao desconectar pinos de saída de um fio, é possível que múltiplos pinos compartilhem o mesmo fio (chamado de barramento). É importante que no máximo 1 saída de componente permaneça conectada a cada tick, caso contrário você corre o risco de um curto-circuito.

[center][img]res://dialogue/switch.png[/img][/center]

Neste simulador, pinos que podem ser desconectados são cinza.


=== rpg/maps/overworld/glibob ===

$80046978163833*
Encontre Derpoo, ele provavelmente
está na grama perto da 
fazenda de gosma
$45824943235521*
Queremos explodir o 
núcleo do reator da nave
$97390820492796*
Então empurre ele para 
a esteira e dentro
do reator
$61010950688784* Saudações robô, tenho um segredo
$77669473873198* Obrigado pelo seu serviço, camarada
$78863196560749*
Meu deus, você vai
me pedir para empurrar Derpoo lá?
$83512698380440*
Estou trabalhando
para a rebelião
$20029368257424*
O núcleo tem apenas 1 fraqueza, 
uma pequena porta de exaustão
$72328125758268* Parece loucura
$61319894006188*
De fato. Derpoo, a pequena
criatura aranha
$88299738421104*
Deixe-me adivinhar, por acaso
existe uma coisa dessas 
na nave?
$22954462436472*
Qualquer coisa pequena o suficiente para passar 
pela porta será instantaneamente 
incinerada, exceto se for 
extremamente bem isolada
$16108649728007*
Todos devemos fazer o que
pudermos pela rebelião


=== trans/panel_rol_output ===

$62960066333763* Saída


=== trans/nand_values ===

$38006065064488*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
[b]Saída[/b][/right]


=== trans/manual_assembly ===

$14434902453525* Assembly


=== trans/complete_flower_4 ===

$86527701695205* [center]PRESSIONE QUALQUER TECLA PARA CONTINUAR[/center]


=== main_scripts/ui ===

$74397786006652* Pinos de Saída
$26316545288606* Lógica
$31787377521276* 16bit
$32778241216484* 1bit
$69169839562869* Sondas
$56684378975952* Personalizado
$93805543475022* 32bit
$69195385009785* 64bit
$36744990871521* Níveis
$60495775939951* E/S
$49451948914812* Matemática
$46598465325525* RAM
$12972244522540* Displays
$53900277352031* 8bit
$79029955304279* Pinos de Entrada
$77408777382636* Pinos Não Bufferizados
$73356117817137* Pinos de Saída Tristate
$90490391067117* Apenas Sandbox


=== trans/manual_truth_tables ===

$75695254533352* Tabelas verdade


=== trans/ui_export_success ===

$97849993500646* Exportado com sucesso


=== levels/robot_race ===

$15403032472607* Corrida de robôs é o esporte favorito na nave espacial. Robôs programados de forma diferente completam uma pista de obstáculos. Entre os robôs que completam o percurso, o vencedor é aquele que tinha o menor programa.
$67151579876362*
Controles do Fastbot:
[code][color=#e49f44]0[/color] Ir para direita
[color=#e49f44]1[/color] Ir para baixo
[color=#e49f44]2[/color] Ir para esquerda
[color=#e49f44]3[/color] Ir para cima[/code]
$19966247197959* Desta vez você está controlando o Fastbot, ele não vê o que está na frente dele, mas pode virar para uma nova direção e se mover no mesmo tick. Além disso, ele usa tênis de corrida vermelhos elegantes.


=== trans/panel_console_offset ===

$24810778105207* [right]Deslocamento[/right]


=== components/DelayLine8 ===

$24840584785792* Fornece como saída a entrada deste tick, no próximo tick
$63449911993783* Linha de Atraso de 8 Bits


=== rpg/maps/maze/door ===

$38678596054893* Porta
$92590993851956* Devo estar programado para fazer isso


=== trans/panel_network_inputs ===

$37324411363753*
[right][color=#e49f44]Comando[/color]
IP / ID da Conexão
Dados / Porta
Comprimento dos dados[/right]


=== trans/panel_nand_description ===

$95680138985553* [center]Executa NAND bit a bit em duas entradas[/center]


=== trans/tooltip_tooltip ===

$48829429502039*
[b]Executar rápido[/b]
[color=#cccccc][i]Execute seu computador sem atualizar a interface a cada tick[/i][/color]


=== trans/panel_delayline1_input ===

$25839180359382* [right]Entrada[/right]


=== rpg/maps/cave/rat ===

$86611337488971* Sangue
$59032985199739* Aranha


=== components/Bidirectional8 ===

$20234315861487* Pino Bidirecional de 8 bits
$49499540884410* Pode contornar certos erros de dependência circular


=== rpg/maps/overworld/dumio ===

$90508455672478* Você é completamente inútil
$90907400518591* Robô, você é tão persuasivo
$84369544816422*
Por favor, me ajude a convencer a 
linda Gruliette a sair 
em um encontro comigo
$47782962337131*
Gruliette quer que você
dê a ela uma flor rosa
$67886215959856*
Sou eternamente grato por
sua ajuda HeroBot!
$70960758502635*
Oh não, eu não sei
onde conseguir uma
$48847456759787*
Ela deve estar em seus
aposentos agora, você pode reconhecê-la
 pela sua adorável pele roxa
$19291216215522* Por favor, me ajude robô
$60895426154274*
Ótimo, você encontrou a flor,
agora entregue a ela
$28973657129570* Parece chato
$59402894800235* Agora estou namorando Gruliette


=== rpg/maps/overworld/cousin_robert ===

$41316716865633* Eu conheço o Robert...
$86987136934243* Eu sou seu primo Robert.


=== trans/splitter8_output ===

$69714402466566*
Bit 1
Bit 2
Bit 3
Bit 4
Bit 5
Bit 6
Bit 7
Bit 8


=== trans/options_reset_warning ===

$19141523477461*
Isso excluirá todas as soluções de níveis, componentes personalizados e arquiteturas. Esta ação não pode ser desfeita, tem certeza de que deseja continuar?
(Isso fechará o jogo, ele será redefinido quando você iniciá-lo novamente.)


=== dialogue/schematic_hub/order_by ===

$69981201197158* Crescente
$70134513915163* Adicionados recentemente
$87115430626073* Meus envios
$56045953383535* Arquiteturas
$25536941657464* Componentes
$43488408276984* Populares


=== rpg/maps/overworld/chef ===

$70248641743406* Chef
$92065398867997* Você precisa de ajuda


=== levels/Water World ===

$13739681561355* Volume total: 
$19185457941725* Boas notícias, queremos transformar a Terra em um parque aquático exótico!
$18940654086036* Precisamos que você nos ajude a encontrar um bom local para o tobogã aquático Mergulho do Pirata. Especificamente, estamos procurando uma área que possa reter um alto volume de água.
$14706805272652* Pressione ENTER para mostrar a água
$12881972193444*
A paisagem tem 16 colunas de largura. Leia a entrada 16 vezes para obter a altura da paisagem em cada coluna da esquerda para a direita.
	
Em seguida, forneça como saída o volume total que a paisagem pode conter como resposta.


=== trans/rpg_alloy_description ===

$29268002047995*
[center] [color=#eb5260]BOOM![/color]

Todo mundo morreu
[/center]


=== levels/delay_level_check ===

$59355217078543* Correto!
$68999077595244* Verificar
$90847326020954* Não!





=== trans/manual_de_morgan ===

$20250843622435*
As tabelas verdade das quatro portas fundamentais são simétricas. Você pode converter entre elas [b][color=#6e9759]invertendo a entrada[/color][/b] (setas verticais) ou [b][color=#596197]invertendo a saída[/color][/b] (setas horizontais) conforme indicado pelo gráfico abaixo.

[center][img=400]dialogue/manual/de_morgan.png[/img][/center]

Observações
[table=2]
[cell]1 [/cell][cell]Você pode ir de qualquer porta básica para qualquer outra, no máximo terá que aplicar NOT em ambas as entradas e na saída.[/cell]
[cell]2 [/cell][cell]Você pode alternar entre OR/NOR invertendo a saída. O mesmo vale para AND/NAND. Na verdade, NOR significa NOT OR e NAND significa NOT AND. Note que o formato do componente OR/NOR é idêntico, exceto pelo pequeno ponto na extremidade que significa NOT. AND/NAND também são idênticos exceto por este ponto.[/cell]
[cell]3[/cell][cell]Negar a saída inverte todos os bits na última linha da tabela verdade. Negar as entradas espelha a última linha da tabela verdade em torno do centro.[/cell]
[/table]


=== trans/options_color_wire ===

$64341547590822* Aplicar cor ao fio


=== rpg/maps/cave/door3 ===

$94313460790182* Porta da masmorra


=== misc/credits ===

$15234594767991* créditos


=== trans/panel_decoder3_disable ===

$50918319838744* Desativar


=== rpg/coin ===

$39259781619518* Moeda


=== trans/options_music_volume ===

$93981778736076* Volume da música


=== trans/manual_matrix_display ===

$86092436010494* Display de matriz


=== trans/level_alu2_code ===

$93157894815498* [center]OU[/center]


=== misc/binary_submit ===

$95509904060545* Enviar


=== components/ByteConstant ===

$29445030761909* Valor constante
$25159790815891* Constante de 8 Bits


=== components/Maker16 ===

$55864807379312* Transforma 2 bytes em um valor de 16 bits
$39941195789458* Criador de 16 Bits


=== components/Output64 ===

$77952953696011* Saída de 64 Bits


=== components/Switch16 ===

$15221175893882* Chave de 16 Bits
$59845475842015* Alterna um valor


=== trans/share_prompt_bbcode_tags ===

$51065735869890*
Tags BBcode suportadas: 
URL: [url]https://turingcomplete.game[/url]
Monoespaçada: [code]01011101[/code]


=== rpg/maps/prison/rat ===

$68894472933139* Squeak squeak
$86305699756314* Sangue
$30670667527598* Rato


=== levels/sandbox ===

$17054292175058* Bem-vindo ao sandbox, aqui você tem liberdade para experimentar. Eu te dei fios de 64 bits e alguns componentes de E/S.
$10731996208080* Também há versões de 64 bits do programa, do contador, do registrador e da RAM. Note porém que a RAM de 64 bits leva 1 tick para carregar.
$72764802067974*
Bem-vindo ao sandbox.

Os componentes estão disponíveis nos menus do lado direito. Uma vez colocados, clique nos pinos dos componentes e arraste para conectá-los com fios. À esquerda você encontrará a interface para controle da simulação. Note que você pode clicar com o botão direito em "Executar mais rápido" para definir a velocidade desejada.

Você pode encontrar mais informações sobre a simulação no manual (o botão está no canto superior esquerdo). Recursos notáveis para conferir são a "fábrica de componentes" onde você pode criar seus próprios componentes e o componente de programa, que permite definir seu próprio assembly.
$19454393978813* O teclado permite controlar diretamente seu computador, usando seu... teclado
$14434122873489* O Gerador de Formas de Onda permite criar sons. Provavelmente vou me arrepender de ter te dado esse.
$18405942066048* O Relógio fornece o tempo UNIX atual em microssegundos.
$10451578314373* A Tela de Console permite desenhar caracteres em uma tela (veja o manual para caracteres ASCII)


=== trans/level_complete_stat_type ===

$69511102367948* Tipo


=== trans/panel_or_input ===

$70466834507347*
[right]Entrada 1
Entrada 2[/right]


=== misc/onwards ===

$51096427131653* Avante


=== trans/manual_recipe_Label ===

$30773017984502*
A maioria das [color=#dd6576][url=Circular dependency]dependências circulares[/url][/color] são caóticas, não úteis e introduzidas por erro. Existem algumas exceções úteis, no entanto. Desde que estejam habilitadas no menu de opções, este simulador permite algumas delas.

[b]Trava NOR[/b]
A trava NOR armazena um valor de 1 bit, que está sempre disponível no fio [b]Q[/b]. 
[center]
[table=3]
[cell]   [b]S[/b]  [/cell][cell]      [b]R[/b]     [/cell][cell]Ação[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Não altera nada[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Valor = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Valor = [img]dialogue/on.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Erro[/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/nor_latch.png[/img]
[/center]

[b]Trava NAND[/b]
A trava NAND armazena um valor de 1 bit, que está sempre disponível no fio [b]Q[/b]. 
[center]
[table=3]
[cell]   [b]S[/b]  [/cell][cell]     [b]R[/b]     [/cell][cell]Ação[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Erro[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Valor = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Valor = [img]dialogue/on.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Não altera nada[/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/nand_latch.png[/img]
[/center]

[b]Trava E OU[/b]
A trava E OU armazena um valor de 1 bit, que está sempre disponível no fio [b]Q[/b]. 
[center]
[table=3]
[cell]   [b]H[/b]  [/cell][cell]     [b]R[/b]     [/cell][cell]Ação[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Valor = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Erro[/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Não altera nada[/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Valor = [img]dialogue/on.png[/img][/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/and_or_latch.png[/img]
[/center]


=== trans/panel_equal_description ===

$66334667083051* [center]Verifica se Entrada 1 e Entrada 2 são iguais[/center]


=== levels/byte_less ===

$11252365204151* Crie um circuito que forneça [ON] como saída quando a primeira entrada for menor que a segunda. Interprete os bytes como sendo [color=#dd6576]SEM SINAL[/color].
$62766453128684* {a} é menor que {b}?
$11632471752785* [center]Determine se a primeira entrada é menor que a segunda.[/center]


=== levels/Logic Engine ===

$38905765358316* CÓDIGO
$17594613477534*
Crie um dispositivo que possa fazer OR, NAND, NOR ou AND com duas entradas. A terceira entrada será a [INSTRUÇÃO]. Uma [INSTRUÇÃO] é apenas como chamamos o número que determina o que calcular.

Instruções:
[code][color=#87a8c8]0 OR
1 NAND
2 NOR
3 AND[/color][/code]

Além disso, você não pode mover os componentes vermelhos neste nível, por razões que serão reveladas mais tarde.
$74299241677249* ENTRADA 1
$60407971040713* ENTRADA 2


=== trans/level_byte_less_i_description ===

$21195810950441* [center]Determine se a primeira entrada é menor que a segunda.[/center]


=== trans/hub_order_by ===

$83319579232915* Ordenar por


=== trans/component_panel_latency_RichTextLabel2 ===

$51386316768363*
Está ocupado
Saída 1
Saída 2
Saída 3
Saída 4


=== components/Splitter64 ===

$80420054807186* Divide 64 bits em 8 bytes
$14205692632393* Divisor de 64 bits


=== misc/component_button ===

$75542474510177* PORTA
$20148770258379* Sem área de componente
$53184531022842* Apenas modo sandbox
$40492377880609* Pinos sobrepostos
$63839315669055* ATRASO


=== trans/panel_index_bit_index ===

$96885367697181* [right]Índice[/right]


=== trans/panel_divmod_input ===

$48801764966719*
[right]Numerador
Divisor[/right]


=== components/Output 3 ===

$96269858195218* Saída


=== components/Output 1B ===

$15931283897895* Saída de 8 Bits


=== components/Xor64 ===

$95012060885697* XOR de 64 bits
$13031452187028* XOR bit a bit de dois valores


=== trans/panel_output_output_1 ===

$38712851498419* Saída 2


=== misc/skipped_custom ===

$38174137226538* Selecionar componente

# This is the text on a button that appears when a custom component has changed size and no longer fits in a schematic. You can press this button to make the camera go to the location where the custom component was
$99860977387728* Ir para localização


=== components/ByteXor ===

$98219910712564* XOR de 8 bits
$83236921580268* XOR bit a bit entre dois valores


=== trans/panel_counter16_output ===

$13295622648285* Saída


=== levels/Spacial Invasion ===

$19967210826470* Esteja ciente de que o laser só pode disparar quando não há outros feixes de laser em voo.
$16294185981398* O porão de carga foi infestado com ratos espaciais.
$11505369795084* Consulte a [color=#e49f44][url=the_robot]página do robô[/url][/color] para instruções sobre como programá-lo. Há também um link para essa página no editor de programas.
$10515630949378* Conectamos sua máquina ao nosso robô avançado e queremos que você o programe para atirar nos ratos espaciais com lasers.


=== components/Nand8 ===

$50859914201083* NAND bit a bit entre dois valores
$93314093190526* NAND de 8 Bits


=== components/Add64 ===

$14174811828377* Soma duas entradas
$73418471595285* Somar


=== main_scripts/leg_level ===

$70383685548547* REG {nr}
$20104629254326* ARGUMENTO 2
$65642901654732* {component} deve estar desativado
$98778676892898* {component} deve estar ativado com valor {value}
$14186606871089* Próximo valor do contador de tick será {wrong_value}, mas deveria ser {value}
$27868897434461* Não foi possível encontrar o componente contador
$50722296752142* ENTRADA
$43723329256095* REG {nr}
$37810243909140* CONTADOR
$38681417496680* ARGUMENTO 1
$24003300271049* {component} deveria ter valor {value}, não {wrong_value}
$60997201855346* ENDEREÇO DO RESULTADO
$50231510806554* Não foi possível encontrar o componente do programa
$49810487048038* CONTADOR
$18236360532765* SAÍDA
$84307766381146* OPCODE
$20950946171790* SALTAR PARA


=== levels/call_ret ===

$15840165316981*
Neste nível você deve implementar chamadas e retornos de função com as instruções [color=#e49f44]call[/color] e [color=#e49f44]ret[/color].

Note que ao retornar de uma função, você deve saltar para o endereço que vem DEPOIS da instrução [color=#e49f44]call[/color], caso contrário você criará um laço infinito.
A instrução [color=#e49f44]call[/color] deve fazer o seguinte:
 [i]- Adicionar a largura da instrução ao valor do contador e empilhar ([color=#e49f44]push[/color]) na pilha[/i]
 [i]- Saltar para o endereço da função[/i]

A instrução [color=#e49f44]ret[/color] deve fazer o seguinte:
 [i]- Remover ([color=#e49f44]Pop[/color]) o endereço de retorno da pilha e saltar para ele[/i]

Você pode passar informações para e de uma função salvando os dados em registradores normalmente. Também fique atento a quais registradores uma função irá sobrescrever antes de chamá-la.

$19416009887091*
Às vezes é útil reutilizar uma seção de código. Chamamos essas seções de "funções". Para implementar essa reutilização, pode-se [color=#e63e5b][url=terminology]saltar[/url][/color] para o início da função e saltar de volta novamente no final da função. Chamamos o salto para a função de "chamar" a função, e o salto de volta da função de "retornar" da função.
	
Mas para que essa seção de código seja realmente reutilizável, o salto de retorno precisa ser capaz de retornar para diferentes locais, dependendo de onde chamamos a função.

Poderíamos salvar o valor do contador em um registrador antes de saltar para a função e usar esse valor ao retornar. No entanto, se feito dessa forma, uma função não seria capaz de chamar outra função, pois isso sobrescreveria o endereço de retorno original.

Digamos que a função A chama a função B, que chama a função C. Quando queremos retornar de C, precisamos apenas do endereço de retorno para B e em B precisamos apenas do endereço para A. Em geral, independentemente de qual função olhamos e como elas estão aninhadas, o último endereço de retorno que adicionamos é sempre o primeiro que precisaremos novamente. Esse é exatamente o comportamento da pilha.
$19369640789869* Cortes no orçamento levaram a cortes salariais, mas agora os assistentes de laboratório estão em greve. Você terá que se autoavaliar neste teste. Isso nos dirá algo sobre sua honestidade e maturidade.
$15463931654475* [center]Adicione as instruções "call" e "ret"[/center]


=== misc/ProbeWireBit ===

$49521764791439* Sonda de Fio (bit)
$15206117280094* Exibe um valor no seu componente personalizado ou no editor de programa


=== trans/manual_computer_concepts ===

$60892983318818* Conceitos de computador


=== components/ByteShr ===

$89595863403484* Deslocamento de 8 bits para a direita
$69394421220436* Desloca os bits de uma entrada para a direita


=== rpg/maps/overworld/monklaar ===

$78391472992197* Adoro a fruta nova na cantina!


=== trans/level_sr_latch_RichTextLabel3 ===

$55348415524361*
[right]Entrada 1
Entrada 2
Saída desejada
Saída atual[/right]


=== components/Ashr64 ===

$26454447445967* Desloca bits para a direita, mantendo o sinal do número
$91080427115081* Deslocamento Aritmético de 64 bits para a direita


=== components/LessU64 ===

$13018528868948* Menor que (sem sinal)
$90244529484227* Verifica se uma entrada é menor que a outra


=== trans/panel_regredplus_output ===

$33621557361089*
Carregar saída
Sempre saída


=== trans/panel_shr_input ===

$98628213136355*
[right]Valor
Deslocar por[/right]


=== trans/level_byte_no_description ===

$19806403089477* [center]Inverter cada bit[/center]


=== rpg/maps/prison/human ===

$26878139502295* Aqui jaz o jogador
$55952257027183* Humano
$15754158619172* Sangue
$46356151087784* Eu sou o jogador


=== levels/call_ret/completed ===

$65495857744236* Nível concluído
$82323203550887* Podemos confiar em você?


=== trans/manual_text_instructions ===

$24791538034329*
O que este jogo chama de "instrução" também é conhecido como operação ou opcode (abreviação de código de operação). Independentemente do sistema operacional, linguagem de programação ou quaisquer outras camadas acima dele, todo software deve inevitavelmente ser reduzido a instruções para que a CPU possa processá-las.

Internamente nas CPUs modernas, as instruções são traduzidas em "microcódigos", que são passos ainda menores, fora do alcance do programador.


=== components/Xor32 ===

$66299093873977* XOR 32 bits
$38169019785615* XOR bit a bit entre dois valores


=== components/LessU16 ===

$91783087669146* Verifica se uma entrada é menor que a outra
$33190791348214* Menor (sem sinal)


=== trans/level_turing_complete_description ===

$74859324795927* [center]Adicione condições aos códigos de cálculo[/center]


=== trans/level_nand_check ===

$61241226128494* Não!
$32982011047799* Verificar


=== trans/level_complete_tooltip ===

$33922330743421*
[b]Cor do fio[/b]
[color=#cccccc][i]Mantenha seus fios organizados com cores.[/i][/color]


=== rpg/maps/overworld/knight ===

$97019929955594* Você não passará
$86067786292380* Vou apenas dar a volta...





=== trans/level_odd_number_RichTextLabel2 ===

$28592851869484*
[right][color=#e49f44]Entrada 1
Entrada 2
Entrada 3
Entrada 4[/color]
Saída desejada
Saída atual[/right]


=== trans/level_complete_robot ===

$73150174144736*
[b]Robotron 9000+[/b]
[color=#cccccc][i]Controle o [color=#e49f44]Robotron 9000+[/color] usando seu computador[/i][/color]


=== trans/panel_matrix_color ===

$78812572100236* [center]Pixels / Limpar[/center]


=== components/LessI64 ===

$42718501644862* Menor (com sinal)
$19948786194409* Verifica se uma entrada é menor que a outra


=== components/ByteLessU ===

$68645721548287* Verifica se uma entrada é menor que a outra
$73502755965496* Menor (sem sinal)


=== ui/global_translations ===

$53021804895845* ANDi
$69956969985790* ORi

# Instead of writing 5839000, the number turns into 5.8M
$22896492410578* M
$11144256835662* XORi

# 4 letters max
$61412773713567* SUB
$85913831661289* SE_MENOR
$52344899983501* SE_MENOR_OU_IGUAL
$89945092889418* SUBi

# 4 letters max
$89011349770597* NOT
$18868256335352* Dependência circular - A saída de um componente leva de volta à sua própria entrada. [url=page~Circular dependency]Leia mais[/url]
$71559031724238* SE_NÃO_IGUAL
$29718660090112* Resposta errada

# 4 letters max
$40520283279584* XOR
$12671132029272* Seu circuito foi salvo na fábrica de componentes.
$71204580217527* NOTi
$71195301111400* ADDi
$98178474649432* SE_MAIOR_OU_IGUAL
$68187490877029* SE_IGUAL

# 4 letters max
$44009845985661* ADD

# 4 letters max
$68666991962246* OR
$79492115258673* SE_MAIOR

# Instead of writing 5839, the number turns into 5.8K
$84696693690500* K
$30602804398798* Porta

# 4 letters max
$33873219185286* NAND
$44906330481241* Atraso
$45532697833519* Você chegou ao nível {level}!

# 4 letters max
$64519909700148* AND
$76763908762578* Tick

# 4 letters max
$36090730285143* NOR
$37093663674348* Nível {x}

# Instead of writing 5839000000, the number turns into 5.8B
$71072134093858* B


=== trans/panel_decoder2_description ===

$29468245669811* [center]Ativa 1 das saídas, baseado na entrada[/center]


=== components/Shl16 ===

$79406691850426* Deslocamento à esquerda de 16 bits
$34287811246049* Desloca os bits de uma entrada para a esquerda


=== trans/level_division_headers2 ===

$43313037226215* Resto


=== trans/levels_any_doubles_RichTextLabel2 ===

$60287131882436*
[right]Entrada 1
Entrada 2
Entrada 3
Entrada 4[color=#e49f44]
Saída desejada
Saída atual[/color][/right]


=== trans/schematics_menu_visible_label ===

$34084132835354* Visível no menu


=== components/RegisterRedPlus ===

$57531353625235* Registrador


=== trans/level_saving_bytes_text ===

$43691912945654*
[right]Ação
Estado desejado
Saída desejada
[/right]


=== trans/panel_input_input_2 ===

$13656747150138* Entrada 3


=== components/Counter64 ===

$62528867413395* Contador de 64 Bits
$62736827510023* Incrementa a cada tick, a menos que seja sobrescrito


=== main_scripts/rpg ===

$87641351044559* Nada
$13202063774683* Parede
$14021436258446* VENDO: [color=#e49f44]{looking_at}[/color]
$57777174895519* Parede
$25433644956674* Morto por {who}
$64739179991428* Robô morreu!


$66747898777348* Adicionar


=== trans/level_nand_1 ===

$71204033550134* O que faz a porta NAND?


=== rpg/maps/prison/exit_door ===

$92379689291727* Porta


=== trans/overwrite_button ===

$11839708860574* Sobrescrever


=== rpg/maps/overworld/bush ===

$37683898820147* É um arbusto
$93113262859645* Arbusto


=== misc/rom_file_select_button ===

$46471024006274* Definir arquivo padrão


=== trans/manual_text_program ===

$25326551844839*
O componente de programa é um componente de memória somente leitura, que pode ter seus dados programados em assembly. Para editar o assembly, clique no ícone amarelo de edição no canto do componente.

[center][img]dialogue/manual/program_edit.png[/img][/center]

No meio da tela você verá a área de código, leia mais sobre o assembly [color=#4d82c5][url=Assembly]aqui[/url][/color].

No lado esquerdo da interface do editor de assembly, você pode adicionar códigos assembly (mnemônicos). Códigos assembly funcionam como substitutos para números, então ao invés de lembrar qual número representa a instrução AND em sua arquitetura, você pode adicionar "AND" aos seus códigos assembly, tornando o código mais fácil de ler e escrever.

[center][img]dialogue/manual/assembly_codes.png[/img][/center]

No componente de programa você também encontrará o botão "Observar estado".

[center][img]dialogue/manual/watch_state.png[/img][/center]

Isso pode ser usado para conectar o editor de assembly a registradores, contadores ou sondas. Dessa forma, o estado da sua arquitetura pode ser inspecionado enquanto você escreve código, sem fechar o editor.


=== components/Output32z ===

$20432213737411* Saída Comutada de 32 Bits
$73681609562628* Só fornece saída se o pino de comutação estiver [ON]


=== trans/level_negative_Label ===

$11951041502381* Mude o significado de cada bit alterando os números.


=== trans/level_byte_equal_description ===

$38686097566531* [center]Verificar se os bytes são iguais[/center]


=== components/Xnor ===

$94079327237795* XNOR
$90614106399129*
[ON] quando as entradas são iguais
[table=5]
[cell]Entrada 1[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Entrada 2[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Saída[/cell][cell][ON][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell]
[/table]


=== components/Not16 ===

$17394768116288* NOT de 16 Bits
$91053300263019* Inverte 16 bits bit a bit


=== trans/panel_sound_command ===

$66510191984141* Comando


=== trans/panel_input_up ===

$97169317610794* Para cima


=== trans/level_complete_manual_page ===

$39011561067359*
[b]Entrada do Manual[/b]
[color=#cccccc][i]RTFM[/i][/color]

Entrada: [color=#68d277]Complexidade arquitetural[/color]


=== trans/level_complete_stat_level ===

$92313038380926* Nível


=== trans/manual_network ===

$67416967652082* Rede


=== component_panels/SpriteDisplay ===

$94199633210330* Nenhum


=== trans/ticks_sec ===

$16026817441460* ticks/seg


=== rpg/maps/boss_room/tricky ===

$83674875280936* Não seja tímido
$36278362971660* Não não não!!
$48425443153584* Eu odeio odeio odeio
$55557864347967* Ruiiiiim
$46678960551148* NÃO NÃO NÃO
$34049297531488* por favor venha venha
$45293657348934* Hahahah
$45196756331738* trapaceiro
$62754542093871* Atira atira atira
$44499633447481* Não posso esperar
$96717076976482* Volte. Meu peito
$39217019822298* GIGIGIGIGI
$83023298467462* GIGIGIGIG
$54218005116072* Ruim ruim ruim
$88481545304668* GIIIIIII
$83172011939489* não tenha medo
$58217446676216* Rasga trapaceiro


=== trans/xor_gate_RichTextLabel2 ===

$21417732641222*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual[/right]


=== trans/options_setting_program_alignment ===

$54874717650167* Aviso de alinhamento de programa


Nome
Descrição


=== trans/panel_shr_output ===

$53187359961794* Saída


=== trans/panel_or_output ===

$68791649314727* Resultado


=== components/ON ===

$96212935718484* Sempre [LIGADO]
$95896157427528* LIGADO


=== ui/top_bar/gate_score ===

$16224450605442* PONTUAÇÃO DE PORTAS:


=== misc/score_sync ===

$76911045833478* sincronização de pontuação


=== components/RegisterRed ===

$10081371413873* Registrador


=== trans/delete_confirm ===

$57294448765637*
Tem certeza de que deseja
excluir este esquema?
$74657548486940* Sim


=== levels/saving_gracefully ===

$14295883660596* VALOR
$14950983012226* SALVAR
$14837033157870* AÇÃO
$12474728041023*
A Linha de Atraso só nos permite salvar um valor por 1 tick. Mas às vezes um componente que pode salvar um valor por períodos mais longos é útil.

Queremos que você construa tal componente.
$13045361823397* NÃO SALVAR
$13740696609075*
Neste nível você tem 2 entradas.
Quando a primeira entrada está [ON], atualize o valor salvo.
A segunda entrada é o valor.
Sempre forneça como saída o que está salvo atualmente.
Este é um diagrama do componente que queremos que você construa:

[img]dialogue/saving_gracefully/bit_memory.png[/img]


Confira [color=#e63e5b][url=saving_gracefully]esta dica[/url][/color] se ficar travado.


=== ui/files_export_description ===

$78500352397752*
[b]Opções de exportação[/b]

 Formato:

 Arquivo de construção:

 Otimizar:

 Caminho de saída:


=== trans/rpg_hats_exit ===

$71200030457801* Sair


=== trans/level_unseen_fruit_description ===

$96313037592447* [center]Use o robô para escanear a fruta[/center]


=== trans/panel_keyboard_character_mode ===

$98676883649624* [right]Modo de caractere[/right]


=== ui/file_export_button ===

$35572795990520* Exportar


=== trans/panel_divmod_output ===

$94866933026297*
Div
Mod


=== trans/nor_gate_RichTextLabel2 ===

$52955821161579*
[right][color=#e49f44]Entrada 1
Entrada 2[/color]
Saída desejada
Saída atual[/right]


=== trans/instructions_the_robot ===

$26358418182667*
[color=#e49f44]0[/color] Virar à esquerda
[color=#e49f44]1[/color] Mover para frente
[color=#e49f44]2[/color] Virar à direita
[color=#e49f44]3[/color] Curtir o momento
[color=#e49f44]4[/color] Usar ação [color=#a9a9a9](enter)[/color]
[color=#e49f44]5[/color] Atirar laser [color=#a9a9a9](tab)[/color]


=== trans/manual_text_edit_instructions ===

$75786562031150*
Após completar o nível "Turing Complete", o painel de instruções permite editar manualmente as instruções. Isso é útil se você quiser construir seus próprios computadores.

Se você acabou de terminar o computador OVERTURE e vê algo estranho, é provável que você tenha alterado as definições.

Cada linha tem um rótulo e 8 bits que você pode definir como[img]dialogue/on.png[/img], [img]dialogue/off.png[/img] ou [img]dialogue/any.png[/img] (coringa). Ao usar o painel de instruções, se o padrão de bits corresponder a uma linha, o rótulo será exibido.


=== components/Rol32 ===

$88734684504266* Rotaciona os bits de uma entrada para a esquerda
$83642246004160* Rotação para a esquerda de 32 bits


=== trans/panel_add_input ===

$43784903785964*
[right]Transporte ENTRADA
Entrada 1
Entrada 2[/right]


=== trans/panel_mux_description ===

$30551449512908* [center]Seleciona entrada 1 ou 2[/center]


=== trans/options_code_font_size ===

$98135524286922* Tamanho da fonte do código


=== trans/rpg_complete_derpootext6 ===

$29750433345543* [center]Como você pôde?[/center]


=== trans/panel_sum_output_0 ===

$54481599074471* Soma


=== trans/panel_less_u_output ===

$19353239892904* Saída


=== levels/binary_start ===

$19099025738142* Iniciar


=== ui/file_export ===

$80702678699819* Exportar


=== rpg/maps/boss_room/abyss ===

$75322073059042* Abismo


=== trans/panel_counter8_output ===

$35643379690712* Saída


=== rpg/maps/overworld/flower ===

$72524391591873* Flor


=== components/Input1_1B ===

$10517158300617* Entrada do nível
$57868504368581* Carrega a entrada dos níveis


=== trans/manual_text_network ===

$70445160410129*
[b]Visão Geral[/b]
O componente "Network" fornece acesso de baixo nível à rede. Em geral, você manipula sua rede enviando [color=#e49f44]Comandos[/color] ao componente e quando [color=#39aa49]Eventos[/color] de atualização retornam da rede, eles são enfileirados e você os processa um por vez. Para rastrear diferentes conexões simultâneas, são usados [color=#dd6576]IDs de Conexão[/color].

Estes são os tipos de comando que você pode enviar ao componente e seus argumentos:
[code]0[/code] Nenhum comando
[code]1[/code] [color=#e49f44]Escutar[/color] ([color=#dd6576]Porta[/color])
[code]2[/code] [color=#e49f44]Conectar[/color] ([color=#dd6576]IP[/color], [color=#dd6576]Porta[/color])
[code]3[/code] [color=#e49f44]Enviar dados[/color] ([color=#dd6576]ID de Conexão[/color], [color=#dd6576]Dados[/color], [color=#dd6576]Tamanho dos dados[/color])
[code]4[/code] [color=#e49f44]Fechar[/color] ([color=#dd6576]ID de Conexão[/color])
[code]5[/code] [color=#e49f44]Ler próximo evento[/color]
[i]Veja o painel do componente para saber qual pino corresponde a qual argumento.[/i]

Os tipos de comando [color=#e49f44]Escutar[/color] e [color=#e49f44]Conectar[/color] fornecem como saída o [color=#dd6576]ID de Conexão[/color] da nova conexão.

Para que 2 programas possam [color=#e49f44]Enviar dados[/color] entre si, um programa deve primeiro [color=#e49f44]Escutar[/color] (chamado de servidor) em uma [color=#dd6576]Porta[/color] e o outro deve então [color=#e49f44]Conectar[/color] (chamado de cliente), usando o [color=#dd6576]IP[/color] do programa que está escutando e a [color=#dd6576]Porta[/color] selecionada. Uma vez que a conexão é estabelecida, o servidor e o cliente funcionam exatamente da mesma forma.

Note que um [color=#dd6576]IP[/color] é um número de 32 bits, normalmente escrito como 4 bytes com pontos entre eles (exemplo: 127.0.0.1). Neste simulador você inverte a ordem dos bytes, então 127.0.0.1 se torna 0x0100007F. 0x0100007F é sempre o endereço de loopback do seu computador e você pode usá-lo para conectar programas rodando no mesmo computador.

Você pode detectar quando eventos acontecem na rede verificando o pino "Tipo do próximo evento". Estes são os tipos de evento:
[code]0[/code] Nenhum evento
[code]1[/code] [color=#39aa49]Conexão recebida[/color] ([color=#dd6576]ID de Conexão[/color], [color=#dd6576]Porta[/color])
[code]2[/code] [color=#39aa49]Conexão completa[/color]
[code]3[/code] [color=#39aa49]Receber dados[/color] ([color=#dd6576]ID de Conexão, Dados[/color], [color=#dd6576]Tamanho dos dados[/color])
[code]4[/code] [color=#39aa49]Conexão fechada[/color] ([color=#dd6576]ID de Conexão[/color] / [color=#dd6576]Código de erro[/color])

[color=#39aa49]Conexão recebida[/color] só acontece após um [color=#e49f44]Escutar[/color]. Use a [color=#dd6576]Porta[/color] para distinguir entre escutadores (não é possível escutar na mesma porta duas vezes ao mesmo tempo).

[color=#39aa49]Conexão completa[/color] só acontece após um [color=#e49f44]Conectar[/color], aguarde por isso antes de começar a enviar dados.

Você pode enviar ou receber entre 1 e 8 bytes de dados por vez, use o [color=#dd6576]Tamanho dos dados[/color] para decidir.

Uma conexão pode estar "possivelmente aberta" ou "fechada". Não há como saber se uma conexão está realmente aberta além de enviar dados. Os protocolos de rede subjacentes foram projetados desta forma para confiabilidade e velocidade, não é uma limitação do simulador.

Se você receber um [color=#dd6576]ID de Conexão[/color] de -1, isso significa que houve um erro ao conectar.


=== trans/level_negative_Label2 ===

$39515538046175* Alterne os bits para ver o resultado.


=== ui/toggles/negative_numbers ===

$50924073287410* Alternar formato numérico


=== trans/levels_description ===

$33755630709299* Derrote NAK 02 para salvar o mundo


=== misc/factory_back_inner ===

$12211557416281* Voltar


=== trans/panel_rom_inputs ===

$52400325164412*
[right]Carregar
[i][color=#aaaaaa](apenas no sandbox)[/color][/i] Salvar
Endereço
Salvar valor[/right]


=== components/ByteShl ===

$74488427658653* Deslocamento de 8 Bits à Esquerda
$66482114876737* Desloca os bits de uma entrada para a esquerda


=== trans/schematics_description ===

$39347262933523* Nome


=== components/Add16 ===

$28092601427278* Soma duas entradas
$30820974870562* Somar


=== components/Not32 ===

$33620523355085* NOT de 32 Bits
$24607331341411* Inverte 32 bits bit a bit


$11482037025960*
Entrada 1


Entrada 2


=== components/MemoryProbe ===

$46948613505134* Exibe um valor em seu componente personalizado ou no editor de programa
$44867305035474* Sonda de Memória


=== components/LevelOutput8 ===

$77044600156969* Saída


=== trans/level_turing_complete_text ===

$83740652063566*
Código
Entrada


=== misc/StateProbe ===

$54427436420428* Sonda de Fio
$15969687819995* Exibe um valor no seu componente personalizado ou no editor de programa


=== trans/manual_text_rgb ===

$52915933943906*
Este simulador usa cores RGB de 3 bytes para alguns componentes. As cores têm 1 byte cada, o valor do byte determinando a intensidade de cada cor: 
[color=#e3243f]RRRRRRRR[/color][color=#55ff55]GGGGGGGG[/color][color=#3333ff]BBBBBBBB[/color]


=== levels/sr_latch ===

$11150103897185*
Neste nível, componentes podem depender de si mesmos ou formar laços de até dois componentes. Apesar de dependerem de sua própria saída, alguns desses fios têm saídas estáveis, pelo menos para algumas entradas.
#
#O circuito que você deve construir aqui tem uma dependência circular. O circuito também tem 2 "estados estáveis" para a maioria das entradas. Um estado estável aqui significa que a saída de cada componente concorda com sua entrada. Como exemplo, uma porta OR com uma entrada desconectada e a outra conectada à sua própria saída é estável. Se a saída estiver [OFF], ambas as entradas estão [OFF], o que concorda com a porta OR. Se a saída estiver [ON], então uma das entradas também está. No entanto, uma porta NOT conectada à sua própria entrada não é estável. Se a saída estiver [ON], então a entrada também está [ON]. Isso fará com que a porta NOT tente fazer a saída ficar [OFF], o que também fará a entrada ficar [OFF]. O circuito alternará entre esses dois estados para sempre, então não é estável.
$18165461234561* Linhas de atraso são fáceis de entender e podem ser usadas para construir qualquer arquitetura de computador. No entanto, o hardware moderno não as usa mais como base para memória.
$15754153332116* Este nível introduz o conceito de latches. Esta mecânica não é necessária para completar o jogo.
$15213907597666* Usando 2 portas NOR, construa o circuito que corresponde à tabela. Você precisará de um latch.
$19448398663695*
Quando queremos determinar o que os componentes em uma dependência circular estão enviando como saída, não temos um primeiro componente com o qual começar. Em vez disso, usamos os valores dos fios do tick anterior. Isso ocorre porque no hardware real os elétrons não viajam instantaneamente. Dependendo do circuito, os fios ou oscilam entre [ON] e [OFF], ou se estabilizam em um estado estável.
#
#Quando você tem um circuito onde os fios podem se estabilizar em qualquer um de 2 estados estáveis diferentes, você tem uma base para memória. O próximo estado dependerá dos valores que os fios tinham no tick anterior. Tais fios são chamados de "latches".


=== trans/complete_unlocks ===

$45250062735373* Desbloqueios


=== trans/view_solution_text ===

$83652444593618* Deseja visualizar a solução deste nível?


=== components/FastRam ===

$79436020115192* Memória rápida mas com alto custo de portas
$12924829814634* RAM Rápida


=== levels/byte_xor ===

$19636386696963* Crie um circuito que faça XOR bit a bit entre dois bytes.


=== rpg/maps/overworld/table ===

$53798109572704* É uma mesa...
$74345816549611* Mesa


=== misc/add_bottom ===

$86446054110623* Adicionar


=== levels/Immediate Values ===

$64348543296709* O componente vinculado {value} deve apontar para a saída
$14060810229477* Adicione 6 registradores ao mapa
$79667526283284* O componente vinculado {value} deve apontar para o contador
$14960344494328*
Às vezes é útil carregar um valor diretamente do programa em vez de registradores. Isso é chamado de carregar um valor imediato. Na arquitetura [color=#e49f44]LEG[/color] sinalizamos quando queremos fazer isso diretamente no opcode. Podemos fazer isso da seguinte forma:
	
Quando o 8º bit do opcode estiver [LIGADO], use o argumento 1 como um valor imediato, em vez de como um endereço de registrador.
Quando o 7º bit do opcode estiver [LIGADO], use o argumento 2 como um valor imediato, em vez de como um endereço de registrador.
	
		[img]dialogue/leg_diagram_2.png[/img]
		

$10788301006338* O componente vinculado {nr} deve apontar para um registrador ou componente personalizado com um registrador dentro
$19338533633006* Defina o incremento do contador para 4
$15197362332657* Crie um novo esquemático e adicione um programa com saída de 4 bytes
$18004215603701* Adicione um contador ao circuito
$10141611261952* [center]Implemente valores imediatos[/center]


=== components/switch ===

$87345192339084* Alterna um valor
$29301846684808* Chave de 8 Bits


=== levels/Wire Spaghetti ===

$29329105515650* Adicionar mais 1 registrador ao mapa
$17106892574116* Adicionar um contador ao circuito
$50177586789991* Adicionar mais {nr} registradores ao mapa
$15754373587500* Definir o incremento do contador para 4
$56024330661504* O componente vinculado {nr} deve apontar para um registrador ou componente personalizado com um registrador dentro
$19099471819164*
A seguir estão as etapas de configuração que precisam ser feitas para completar este nível:
		
[b]1.[/b] Clique no ícone de esquemático ([b][i][/i][/b]) e crie uma nova arquitetura vazia.
[b]2.[/b] Coloque um bloco de programa com 4 saídas.
[b]3.[/b] Coloque um contador, defina seu incremento para 4 e conecte-o ao bloco de programa.
[b]4.[/b] Adicione 6 registradores (ou componentes personalizados com registradores)
[b]5.[/b] Clique em "Editar componentes vinculados" no componente de programa e conecte os registradores de 0 a 5. Conecte o contador a 6 e a saída a 7.

$18860645759682*
A arquitetura [color=#e49f44]LEG[/color] é um computador que recebe 4 bytes por tick do programa.

O primeiro byte descreve a operação (chamada de [color=#e49f44]OPCODE[/color]).

Como muitas operações usam 2 argumentos (como ADD, OR etc), o segundo e terceiro byte são para argumentos.

E como a maioria das operações retorna 1 resultado, o quarto byte é para o resultado.
	
	[img]dialogue/leg_diagram_1.png[/img]
$11377431500625* Adicionar 6 registradores ao mapa
$14051336765362* Finalmente chegou a hora de você começar a construir a arquitetura [color=#e49f44]LEG[/color]!
$13268807052125* (Você pode estar somando 7+7, mas aqui 7 significa carregar da entrada e a entrada tem valor 8)
$30006055126224* O componente vinculado {output} deve apontar para a saída
$19066122929275* [center]Configure os registradores e implemente o OPCODE ADD[/center]
$10912834168905*
Finalmente, neste nível o [color=#e49f44]OPCODE[/color] é sempre 0. Isso significa que somamos o argumento 1 e o argumento 2 e salvamos o resultado no destino.

O valor de um argumento ou destino refere-se a um destes lugares:
[code]
[color=#e49f44]0[/color]: Registrador 0
[color=#e49f44]1[/color]: Registrador 1
[color=#e49f44]2[/color]: Registrador 2
[color=#e49f44]3[/color]: Registrador 3
[color=#e49f44]4[/color]: Registrador 4
[color=#e49f44]5[/color]: Registrador 5
[color=#e49f44]6[/color]: Contador
[color=#e49f44]7[/color]: Entrada/Saída
[/code]

No próximo nível você implementará mais [color=#e49f44]OPCODES[/color], o que exigirá uma ALU diferente da [color=#e49f44]OVERTURE[/color].


$10922418807673* Argumento 7 significa ler da entrada, mas a entrada não está ativada.
$62258842382434* O componente vinculado {counter} deve apontar para o contador
$18769284297247* Crie um novo esquemático e adicione um programa com saída de 4 bytes


=== trans/schematic_new_file_name ===

$24424463568668* Novo esquema


=== trans/negative_numbers ===

$57872971841486* Números negativos

